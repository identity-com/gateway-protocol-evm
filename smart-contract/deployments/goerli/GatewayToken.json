{
  "address": "0x7aa0c390b25327776BF3B281dBB0a9642f6D7f20",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "superAdmin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "flagsStorage",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "trustedForwarders",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "ApprovalValue",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bitmask",
          "type": "uint256"
        }
      ],
      "name": "BitMaskUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousDAOManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newDAOManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "network",
          "type": "uint256"
        }
      ],
      "name": "DAOManagerTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Expiration",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "flagsStorage",
          "type": "address"
        }
      ],
      "name": "FlagsStorageUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Freeze",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Revoke",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "domain",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "domain",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "domain",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "metadataDescriptor",
          "type": "address"
        }
      ],
      "name": "SetMetadataDescriptor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_oldSlot",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_newSlot",
          "type": "uint256"
        }
      ],
      "name": "SlotChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "SuperAdminAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "SuperAdminRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_toTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "TransferValue",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Unfreeze",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DAO_MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GATEKEEPER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NETWORK_AUTHORITY_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "index",
          "type": "uint8"
        }
      ],
      "name": "addBit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mask",
          "type": "uint256"
        }
      ],
      "name": "addBitmask",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "addForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "gatekeeper",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "network",
          "type": "uint256"
        }
      ],
      "name": "addGatekeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "authority",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "network",
          "type": "uint256"
        }
      ],
      "name": "addNetworkAuthority",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "operator_",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value_",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "clearBitmask",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "network",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "daoGoverned",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "daoManager",
          "type": "address"
        }
      ],
      "name": "createNetwork",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "expiration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flagsStorage",
      "outputs": [
        {
          "internalType": "contract IFlagsStorage",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "freeze",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getIdentity",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "domain",
          "type": "uint256"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "state",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "identity",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bitmask",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTokenBitmask",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "network",
          "type": "uint256"
        }
      ],
      "name": "getTokenIdsByOwnerAndNetwork",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTokenState",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "state",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "domain",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "domain",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator_",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "gatekeeper",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "network",
          "type": "uint256"
        }
      ],
      "name": "isGatekeeper",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "authority",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "network",
          "type": "uint256"
        }
      ],
      "name": "isNetworkAuthority",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "isNetworkDAOGoverned",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isSuperAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isTransfersRestricted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metadataDescriptor",
      "outputs": [
        {
          "internalType": "contract IERC3525MetadataDescriptor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "network",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mask",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "enum ChargeType",
              "name": "chargeType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            }
          ],
          "internalType": "struct Charge",
          "name": "charge",
          "type": "tuple"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "index",
          "type": "uint8"
        }
      ],
      "name": "removeBit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "removingMask",
          "type": "uint8"
        }
      ],
      "name": "removeBitmask",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "removeForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "gatekeeper",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "network",
          "type": "uint256"
        }
      ],
      "name": "removeGatekeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "authority",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "network",
          "type": "uint256"
        }
      ],
      "name": "removeNetworkAuthority",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "network",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "renameNetwork",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "domain",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "revoke",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "domain",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeSuperAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data_",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator_",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved_",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mask",
          "type": "uint256"
        }
      ],
      "name": "setBitmask",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "enum ChargeType",
              "name": "chargeType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            }
          ],
          "internalType": "struct Charge",
          "name": "charge",
          "type": "tuple"
        }
      ],
      "name": "setExpiration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "setSuperAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        }
      ],
      "name": "slotOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "slot_",
          "type": "uint256"
        }
      ],
      "name": "slotURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index_",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index_",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "previousManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newManager",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "network",
          "type": "uint256"
        }
      ],
      "name": "transferDAOManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fromTokenId_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value_",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fromTokenId_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "toTokenId_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value_",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transfersRestricted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "unfreeze",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "flagsStorage",
          "type": "address"
        }
      ],
      "name": "updateFlagsStorage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "valueDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "network",
          "type": "uint256"
        }
      ],
      "name": "verifyToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "verifyToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3dc64f3317f73697f48835c0d71dcb973916298044f3009e46843fa54cefde33",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xcbaA8FDf9A9673850cf75E6E42B4eA1aDaA87688",
    "contractAddress": null,
    "transactionIndex": 48,
    "gasUsed": "4986137",
    "logsBloom": "0x
    "blockHash": "0xe153e46090284b89c651d4f15a0be8b656357f2691359789d843a4c43692b43a",
    "transactionHash": "0x3dc64f3317f73697f48835c0d71dcb973916298044f3009e46843fa54cefde33",
    "logs": [
      {
        "transactionIndex": 48,
        "blockNumber": 8403088,
        "transactionHash": "0x3dc64f3317f73697f48835c0d71dcb973916298044f3009e46843fa54cefde33",
        "address": "0x7aa0c390b25327776BF3B281dBB0a9642f6D7f20",
        "topics": [
          "0x5e4a30f4224898dbac86adca855a5edd3b8341a3aeb2b6ff0f0b5a82c013b65a",
          "0x000000000000000000000000d1895ce312dd4bacbb6bf7226222c237ad5a3767"
        ],
        "data": "0x",
        "logIndex": 87,
        "blockHash": "0xe153e46090284b89c651d4f15a0be8b656357f2691359789d843a4c43692b43a"
      }
    ],
    "blockNumber": 8403088,
    "cumulativeGasUsed": "11202253",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Gateway Protocol",
    "PASS",
    "0xcbaA8FDf9A9673850cf75E6E42B4eA1aDaA87688",
    "0xd1895ce312dD4bACbb6bF7226222C237ad5a3767",
    [
      "0xa2C410cc10B4aDA3a1311435715e514bDBeD7D7C"
    ]
  ],
  "numDeployments": 3,
  "solcInputHash": "ff4d18cab683d86eade80bb0dce830fc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"superAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flagsStorage\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"trustedForwarders\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ApprovalValue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bitmask\",\"type\":\"uint256\"}],\"name\":\"BitMaskUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousDAOManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDAOManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"network\",\"type\":\"uint256\"}],\"name\":\"DAOManagerTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Expiration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"flagsStorage\",\"type\":\"address\"}],\"name\":\"FlagsStorageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Revoke\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"domain\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"domain\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"domain\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"metadataDescriptor\",\"type\":\"address\"}],\"name\":\"SetMetadataDescriptor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_oldSlot\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_newSlot\",\"type\":\"uint256\"}],\"name\":\"SlotChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SuperAdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SuperAdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TransferValue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Unfreeze\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAO_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GATEKEEPER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NETWORK_AUTHORITY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"addBit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mask\",\"type\":\"uint256\"}],\"name\":\"addBitmask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"addForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gatekeeper\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"network\",\"type\":\"uint256\"}],\"name\":\"addGatekeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"network\",\"type\":\"uint256\"}],\"name\":\"addNetworkAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"clearBitmask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"network\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"daoGoverned\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"daoManager\",\"type\":\"address\"}],\"name\":\"createNetwork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"expiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flagsStorage\",\"outputs\":[{\"internalType\":\"contract IFlagsStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"freeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getIdentity\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"domain\",\"type\":\"uint256\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"identity\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bitmask\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenBitmask\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"network\",\"type\":\"uint256\"}],\"name\":\"getTokenIdsByOwnerAndNetwork\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenState\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"domain\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"domain\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gatekeeper\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"network\",\"type\":\"uint256\"}],\"name\":\"isGatekeeper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"network\",\"type\":\"uint256\"}],\"name\":\"isNetworkAuthority\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isNetworkDAOGoverned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isSuperAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTransfersRestricted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadataDescriptor\",\"outputs\":[{\"internalType\":\"contract IERC3525MetadataDescriptor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"network\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mask\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"enum ChargeType\",\"name\":\"chargeType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct Charge\",\"name\":\"charge\",\"type\":\"tuple\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"removeBit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"removingMask\",\"type\":\"uint8\"}],\"name\":\"removeBitmask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"removeForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gatekeeper\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"network\",\"type\":\"uint256\"}],\"name\":\"removeGatekeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"network\",\"type\":\"uint256\"}],\"name\":\"removeNetworkAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"network\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"renameNetwork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"domain\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"domain\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeSuperAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved_\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mask\",\"type\":\"uint256\"}],\"name\":\"setBitmask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"enum ChargeType\",\"name\":\"chargeType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct Charge\",\"name\":\"charge\",\"type\":\"tuple\"}],\"name\":\"setExpiration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setSuperAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"slotOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slot_\",\"type\":\"uint256\"}],\"name\":\"slotURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"previousManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"network\",\"type\":\"uint256\"}],\"name\":\"transferDAOManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromTokenId_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromTokenId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toTokenId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transfersRestricted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"unfreeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"flagsStorage\",\"type\":\"address\"}],\"name\":\"updateFlagsStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"valueDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"network\",\"type\":\"uint256\"}],\"name\":\"verifyToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"verifyToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Gateway Token contract is responsible for managing Identity.com KYC gateway tokens  those tokens represent completed KYC with attached identity.  Gateway tokens using ERC721 standard with custom extentions. Contract handles multiple levels of access such as Network Authority (may represent a specific regulator body)  Gatekeepers (Identity.com network parties who can mint/burn/freeze gateway tokens) and overall system Admin who can add new Gatekeepers and Network Authorities\",\"kind\":\"dev\",\"methods\":{\"addBit(uint256,uint8)\":{\"details\":\"Triggers to add one bit at particular `index` for gateway token with `tokenId`\"},\"addBitmask(uint256,uint256)\":{\"details\":\"Triggers to add bitmask for gateway token with `tokenId`\"},\"addGatekeeper(address,uint256)\":{\"details\":\"Triggers to add new gatekeeper into the system. \",\"params\":{\"gatekeeper\":\"Gatekeeper address\"}},\"addNetworkAuthority(address,uint256)\":{\"details\":\"Triggers to add new network authority into the system. \",\"params\":{\"authority\":\"Network Authority address\"}},\"burn(uint256)\":{\"details\":\"Triggers to burn gateway token\",\"params\":{\"tokenId\":\"Gateway token id\"}},\"clearBitmask(uint256)\":{\"details\":\"Triggers to clear bitmask for gateway token with `tokenId`\"},\"constructor\":{\"details\":\"Gateway Token constructor initializes the contract by  setting a `name` and a `symbol` to the gateway token. Initiates gateway token roles with main system admin, `NETWORK_AUTHORITY_ROLE` responsible for adding/removing Gatekeepers and  `GATEKEEPER_ROLE` responsible for minting/burning/transferring tokens\"},\"contractURI()\":{\"details\":\"This function SHOULD return the URI for this contract in JSON format, starting with  header `data:application/json;`.  See https://eips.ethereum.org/EIPS/eip-3525 for the JSON schema for contract URI.\",\"returns\":{\"_0\":\"The JSON formatted URI of the current ERC3525 contract\"}},\"expiration(uint256)\":{\"details\":\"Triggers to get specificied `tokenId` expiration timestamp\",\"params\":{\"tokenId\":\"Gateway token id\"}},\"freeze(uint256)\":{\"details\":\"Triggers to freeze gateway token\",\"params\":{\"tokenId\":\"Gateway token id\"}},\"getIdentity(uint256)\":{\"details\":\"Triggers to get identity attached to specific gateway token\",\"params\":{\"tokenId\":\"Gateway token id\"}},\"getRoleAdmin(bytes32,uint256)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getToken(uint256)\":{\"details\":\"Triggers to get all information gateway token related to specified `tokenId`\",\"params\":{\"tokenId\":\"Gateway token id\"}},\"getTokenBitmask(uint256)\":{\"details\":\"Triggers to get gateway token bitmask\"},\"getTokenState(uint256)\":{\"details\":\"Triggers to get gateway token state with specified `tokenId`\",\"params\":{\"tokenId\":\"Gateway token id\"}},\"grantRole(bytes32,uint256,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,uint256,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isGatekeeper(address,uint256)\":{\"details\":\"Triggers to verify if address has a GATEKEEPER role. \",\"params\":{\"gatekeeper\":\"Gatekeeper address\"}},\"isNetworkAuthority(address,uint256)\":{\"details\":\"Triggers to verify if authority has a NETWORK_AUTHORITY_ROLE role. \",\"params\":{\"authority\":\"Network Authority address\"}},\"mint(address,uint256,uint256,uint256,(uint256,uint8,address,address))\":{\"details\":\"Triggers to mint gateway token\",\"params\":{\"charge\":\"The charge details for token issuance (ignored here - handled if at all by the forwarding contract)\",\"mask\":\"The bitmask for the token\",\"network\":\"Gateway token type\",\"to\":\"Gateway token owner\"}},\"name()\":{\"details\":\"Returns the token collection name.\"},\"removeBit(uint256,uint8)\":{\"details\":\"Triggers to clear one bit at particular `index` for gateway token with `tokenId`\"},\"removeBitmask(uint256,uint8)\":{\"details\":\"Triggers to remove bits in `removingMask` for gateway token with `tokenId`\"},\"removeGatekeeper(address,uint256)\":{\"details\":\"Triggers to remove existing gatekeeper from gateway token. \",\"params\":{\"gatekeeper\":\"Gatekeeper address\"}},\"removeNetworkAuthority(address,uint256)\":{\"details\":\"Triggers to remove existing network authority from gateway token. \",\"params\":{\"authority\":\"Network Authority address\"}},\"renounceRole(bytes32,uint256,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revoke(uint256)\":{\"details\":\"Triggers to revoke gateway token\",\"params\":{\"tokenId\":\"Gateway token id\"}},\"revokeRole(bytes32,uint256,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setBitmask(uint256,uint256)\":{\"details\":\"Triggers to set full bitmask for gateway token with `tokenId`\"},\"setExpiration(uint256,uint256,(uint256,uint8,address,address))\":{\"details\":\"Triggers to set expiration for tokenId\",\"params\":{\"charge\":\"The charge details for token refresh (ignored here - handled if at all by the forwarding contract)\",\"tokenId\":\"Gateway token id\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"totalSupply()\":{\"returns\":{\"_0\":\"A count of valid NFTs tracked by this contract, where each one of  them has an assigned and queryable owner not equal to the zero address\"}},\"transferDAOManager(address,address,uint256)\":{\"details\":\"Transfers Gateway Token DAO Manager access from daoManager to `newManager`\",\"params\":{\"newManager\":\"Address to transfer DAO Manager role for.\"}},\"transfersRestricted()\":{\"details\":\"Returns true if gateway token owner transfers restricted, and false otherwise.\"},\"unfreeze(uint256)\":{\"details\":\"Triggers to unfreeze gateway token\",\"params\":{\"tokenId\":\"Gateway token id\"}},\"updateFlagsStorage(address)\":{\"details\":\"Triggers to update FlagsStorage contract address\",\"params\":{\"flagsStorage\":\"FlagsStorage contract address\"}},\"valueDecimals()\":{\"details\":\"Returns the number of decimals the token uses for value.\"},\"verifyToken(address,uint256)\":{\"details\":\"Triggered by external contract to verify the validity of the default token for `owner`. Checks owner has any token on gateway token contract, `tokenId` still active, and not expired.\"},\"verifyToken(uint256)\":{\"details\":\"Triggered by external contract to verify the validity of the default token for `owner`. Checks owner has any token on gateway token contract, `tokenId` still active, and not expired.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addNetworkAuthority(address,uint256)\":{\"notice\":\"Can be triggered by Gateway Token Controller or any Network Authority\"},\"contractURI()\":{\"notice\":\"Returns the Uniform Resource Identifier (URI) for the current ERC3525 contract.\"},\"removeNetworkAuthority(address,uint256)\":{\"notice\":\"Can be triggered by Gateway Token Controller or any Network Authority\"},\"totalSupply()\":{\"notice\":\"Count NFTs tracked by this contract\"},\"transferDAOManager(address,address,uint256)\":{\"notice\":\"GatewayToken contract has to be DAO Governed\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GatewayToken.sol\":\"GatewayToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@solvprotocol/erc-3525/ERC3525.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC3525.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./IERC3525Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Enumerable.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"./extensions/IERC3525Metadata.sol\\\";\\nimport \\\"./periphery/interface/IERC3525MetadataDescriptor.sol\\\";\\n\\ncontract ERC3525 is Context, IERC3525Metadata, IERC721Enumerable {\\n    using Strings for address;\\n    using Strings for uint256;\\n    using Address for address;\\n    using Counters for Counters.Counter;\\n\\n    event SetMetadataDescriptor(address indexed metadataDescriptor);\\n\\n    struct TokenData {\\n        uint256 id;\\n        uint256 slot;\\n        uint256 balance;\\n        address owner;\\n        address approved;\\n        address[] valueApprovals;\\n    }\\n\\n    struct AddressData {\\n        uint256[] ownedTokens;\\n        mapping(uint256 => uint256) ownedTokensIndex;\\n        mapping(address => bool) approvals;\\n    }\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n    Counters.Counter private _tokenIdGenerator;\\n\\n    // id => (approval => allowance)\\n    // @dev _approvedValues cannot be defined within TokenData, cause struct containing mappings cannot be constructed.\\n    mapping(uint256 => mapping(address => uint256)) private _approvedValues;\\n\\n    TokenData[] private _allTokens;\\n\\n    // key: id\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    mapping(address => AddressData) private _addressData;\\n\\n    IERC3525MetadataDescriptor public metadataDescriptor;\\n\\n    constructor(string memory name_, string memory symbol_, uint8 decimals_) {\\n         _name = name_;\\n        _symbol = symbol_;\\n        _decimals = decimals_;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return\\n            interfaceId == type(IERC165).interfaceId ||\\n            interfaceId == type(IERC3525).interfaceId ||\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC3525Metadata).interfaceId ||\\n            interfaceId == type(IERC721Enumerable).interfaceId || \\n            interfaceId == type(IERC721Metadata).interfaceId;\\n    }\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals the token uses for value.\\n     */\\n    function valueDecimals() public view virtual override returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function balanceOf(uint256 tokenId_) public view virtual override returns (uint256) {\\n        _requireMinted(tokenId_);\\n        return _allTokens[_allTokensIndex[tokenId_]].balance;\\n    }\\n\\n    function ownerOf(uint256 tokenId_) public view virtual override returns (address owner_) {\\n        _requireMinted(tokenId_);\\n        owner_ = _allTokens[_allTokensIndex[tokenId_]].owner;\\n        require(owner_ != address(0), \\\"ERC3525: invalid token ID\\\");\\n    }\\n\\n    function slotOf(uint256 tokenId_) public view virtual override returns (uint256) {\\n        _requireMinted(tokenId_);\\n        return _allTokens[_allTokensIndex[tokenId_]].slot;\\n    }\\n\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    function contractURI() public view virtual override returns (string memory) {\\n        string memory baseURI = _baseURI();\\n        return \\n            address(metadataDescriptor) != address(0) ? \\n                metadataDescriptor.constructContractURI() :\\n                bytes(baseURI).length > 0 ? \\n                    string(abi.encodePacked(baseURI, \\\"contract/\\\", Strings.toHexString(address(this)))) : \\n                    \\\"\\\";\\n    }\\n\\n    function slotURI(uint256 slot_) public view virtual override returns (string memory) {\\n        string memory baseURI = _baseURI();\\n        return \\n            address(metadataDescriptor) != address(0) ? \\n                metadataDescriptor.constructSlotURI(slot_) : \\n                bytes(baseURI).length > 0 ? \\n                    string(abi.encodePacked(baseURI, \\\"slot/\\\", slot_.toString())) : \\n                    \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId_) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId_);\\n        string memory baseURI = _baseURI();\\n        return \\n            address(metadataDescriptor) != address(0) ? \\n                metadataDescriptor.constructTokenURI(tokenId_) : \\n                bytes(baseURI).length > 0 ? \\n                    string(abi.encodePacked(baseURI, tokenId_.toString())) : \\n                    \\\"\\\";\\n    }\\n\\n    function approve(uint256 tokenId_, address to_, uint256 value_) public payable virtual override {\\n        address owner = ERC3525.ownerOf(tokenId_);\\n        require(to_ != owner, \\\"ERC3525: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || ERC3525.isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC3525: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approveValue(tokenId_, to_, value_);\\n    }\\n\\n    function allowance(uint256 tokenId_, address operator_) public view virtual override returns (uint256) {\\n        _requireMinted(tokenId_);\\n        return _approvedValues[tokenId_][operator_];\\n    }\\n\\n    function transferFrom(\\n        uint256 fromTokenId_,\\n        address to_,\\n        uint256 value_\\n    ) public payable virtual override returns (uint256) {\\n        _spendAllowance(_msgSender(), fromTokenId_, value_);\\n\\n        uint256 newTokenId = _createDerivedTokenId(fromTokenId_);\\n        _mint(to_, newTokenId, ERC3525.slotOf(fromTokenId_), 0);\\n        _transferValue(fromTokenId_, newTokenId, value_);\\n\\n        return newTokenId;\\n    }\\n\\n    function transferFrom(\\n        uint256 fromTokenId_,\\n        uint256 toTokenId_,\\n        uint256 value_\\n    ) public payable virtual override {\\n        _spendAllowance(_msgSender(), fromTokenId_, value_);\\n        _transferValue(fromTokenId_, toTokenId_, value_);\\n    }\\n\\n    function balanceOf(address owner_) public view virtual override returns (uint256 balance) {\\n        require(owner_ != address(0), \\\"ERC3525: balance query for the zero address\\\");\\n        return _addressData[owner_].ownedTokens.length;\\n    }\\n\\n    function transferFrom(\\n        address from_,\\n        address to_,\\n        uint256 tokenId_\\n    ) public payable virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId_), \\\"ERC3525: transfer caller is not owner nor approved\\\");\\n        _transferTokenId(from_, to_, tokenId_);\\n    }\\n\\n    function safeTransferFrom(\\n        address from_,\\n        address to_,\\n        uint256 tokenId_,\\n        bytes memory data_\\n    ) public payable virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId_), \\\"ERC3525: transfer caller is not owner nor approved\\\");\\n        _safeTransferTokenId(from_, to_, tokenId_, data_);\\n    }\\n\\n    function safeTransferFrom(\\n        address from_,\\n        address to_,\\n        uint256 tokenId_\\n    ) public payable virtual override {\\n        safeTransferFrom(from_, to_, tokenId_, \\\"\\\");\\n    }\\n\\n    function approve(address to_, uint256 tokenId_) public payable virtual override {\\n        address owner = ERC3525.ownerOf(tokenId_);\\n        require(to_ != owner, \\\"ERC3525: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || ERC3525.isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC3525: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to_, tokenId_);\\n    }\\n\\n    function getApproved(uint256 tokenId_) public view virtual override returns (address) {\\n        _requireMinted(tokenId_);\\n        return _allTokens[_allTokensIndex[tokenId_]].approved;\\n    }\\n\\n    function setApprovalForAll(address operator_, bool approved_) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator_, approved_);\\n    }\\n\\n    function isApprovedForAll(address owner_, address operator_) public view virtual override returns (bool) {\\n        return _addressData[owner_].approvals[operator_];\\n    }\\n\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    function tokenByIndex(uint256 index_) public view virtual override returns (uint256) {\\n        require(index_ < ERC3525.totalSupply(), \\\"ERC3525: global index out of bounds\\\");\\n        return _allTokens[index_].id;\\n    }\\n\\n    function tokenOfOwnerByIndex(address owner_, uint256 index_) public view virtual override returns (uint256) {\\n        require(index_ < ERC3525.balanceOf(owner_), \\\"ERC3525: owner index out of bounds\\\");\\n        return _addressData[owner_].ownedTokens[index_];\\n    }\\n\\n    function _setApprovalForAll(\\n        address owner_,\\n        address operator_,\\n        bool approved_\\n    ) internal virtual {\\n        require(owner_ != operator_, \\\"ERC3525: approve to caller\\\");\\n\\n        _addressData[owner_].approvals[operator_] = approved_;\\n\\n        emit ApprovalForAll(owner_, operator_, approved_);\\n    }\\n\\n    function _isApprovedOrOwner(address operator_, uint256 tokenId_) internal view virtual returns (bool) {\\n        _requireMinted(tokenId_);\\n        address owner = ERC3525.ownerOf(tokenId_);\\n        return (\\n            operator_ == owner ||\\n            ERC3525.isApprovedForAll(owner, operator_) ||\\n            ERC3525.getApproved(tokenId_) == operator_\\n        );\\n    }\\n\\n    function _spendAllowance(address operator_, uint256 tokenId_, uint256 value_) internal virtual {\\n        uint256 currentAllowance = ERC3525.allowance(tokenId_, operator_);\\n        if (!_isApprovedOrOwner(operator_, tokenId_) && currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= value_, \\\"ERC3525: insufficient allowance\\\");\\n            _approveValue(tokenId_, operator_, currentAllowance - value_);\\n        }\\n    }\\n\\n    function _exists(uint256 tokenId_) internal view virtual returns (bool) {\\n        return _allTokens.length != 0 && _allTokens[_allTokensIndex[tokenId_]].id == tokenId_;\\n    }\\n\\n    function _requireMinted(uint256 tokenId_) internal view virtual {\\n        require(_exists(tokenId_), \\\"ERC3525: invalid token ID\\\");\\n    }\\n\\n    function _mint(address to_, uint256 slot_, uint256 value_) internal virtual returns (uint256) {\\n        uint256 tokenId = _createOriginalTokenId();\\n        _mint(to_, tokenId, slot_, value_);  \\n        return tokenId;\\n    }\\n\\n    function _mint(address to_, uint256 tokenId_, uint256 slot_, uint256 value_) internal virtual {\\n        require(to_ != address(0), \\\"ERC3525: mint to the zero address\\\");\\n        require(tokenId_ != 0, \\\"ERC3525: cannot mint zero tokenId\\\");\\n        require(!_exists(tokenId_), \\\"ERC3525: token already minted\\\");\\n\\n        _beforeValueTransfer(address(0), to_, 0, tokenId_, slot_, value_);\\n        __mintToken(to_, tokenId_, slot_);\\n        __mintValue(tokenId_, value_);\\n        _afterValueTransfer(address(0), to_, 0, tokenId_, slot_, value_);\\n    }\\n\\n    function _mintValue(uint256 tokenId_, uint256 value_) internal virtual {\\n        _requireMinted(tokenId_);\\n\\n        address owner = ERC3525.ownerOf(tokenId_);\\n        uint256 slot = ERC3525.slotOf(tokenId_);\\n        _beforeValueTransfer(address(0), owner, 0, tokenId_, slot, value_);\\n        __mintValue(tokenId_, value_);\\n        _afterValueTransfer(address(0), owner, 0, tokenId_, slot, value_);\\n    }\\n\\n    function __mintValue(uint256 tokenId_, uint256 value_) private {\\n        _allTokens[_allTokensIndex[tokenId_]].balance += value_;\\n        emit TransferValue(0, tokenId_, value_);\\n    }\\n\\n    function __mintToken(address to_, uint256 tokenId_, uint256 slot_) private {\\n        TokenData memory tokenData = TokenData({\\n            id: tokenId_,\\n            slot: slot_,\\n            balance: 0,\\n            owner: to_,\\n            approved: address(0),\\n            valueApprovals: new address[](0)\\n        });\\n\\n        _addTokenToAllTokensEnumeration(tokenData);\\n        _addTokenToOwnerEnumeration(to_, tokenId_);\\n\\n        emit Transfer(address(0), to_, tokenId_);\\n        emit SlotChanged(tokenId_, 0, slot_);\\n    }\\n\\n    function _burn(uint256 tokenId_) internal virtual {\\n        _requireMinted(tokenId_);\\n\\n        TokenData storage tokenData = _allTokens[_allTokensIndex[tokenId_]];\\n        address owner = tokenData.owner;\\n        uint256 slot = tokenData.slot;\\n        uint256 value = tokenData.balance;\\n\\n        _beforeValueTransfer(owner, address(0), tokenId_, 0, slot, value);\\n\\n        _clearApprovedValues(tokenId_);\\n        _removeTokenFromOwnerEnumeration(owner, tokenId_);\\n        _removeTokenFromAllTokensEnumeration(tokenId_);\\n\\n        emit TransferValue(tokenId_, 0, value);\\n        emit SlotChanged(tokenId_, slot, 0);\\n        emit Transfer(owner, address(0), tokenId_);\\n\\n        _afterValueTransfer(owner, address(0), tokenId_, 0, slot, value);\\n    }\\n\\n    function _burnValue(uint256 tokenId_, uint256 burnValue_) internal virtual {\\n        _requireMinted(tokenId_);\\n\\n        TokenData storage tokenData = _allTokens[_allTokensIndex[tokenId_]];\\n        address owner = tokenData.owner;\\n        uint256 slot = tokenData.slot;\\n        uint256 value = tokenData.balance;\\n\\n        require(value >= burnValue_, \\\"ERC3525: burn value exceeds balance\\\");\\n\\n        _beforeValueTransfer(owner, address(0), tokenId_, 0, slot, burnValue_);\\n        \\n        tokenData.balance -= burnValue_;\\n        emit TransferValue(tokenId_, 0, burnValue_);\\n        \\n        _afterValueTransfer(owner, address(0), tokenId_, 0, slot, burnValue_);\\n    }\\n\\n    function _addTokenToOwnerEnumeration(address to_, uint256 tokenId_) private {\\n        _allTokens[_allTokensIndex[tokenId_]].owner = to_;\\n\\n        _addressData[to_].ownedTokensIndex[tokenId_] = _addressData[to_].ownedTokens.length;\\n        _addressData[to_].ownedTokens.push(tokenId_);\\n    }\\n\\n    function _removeTokenFromOwnerEnumeration(address from_, uint256 tokenId_) private {\\n        _allTokens[_allTokensIndex[tokenId_]].owner = address(0);\\n\\n        AddressData storage ownerData = _addressData[from_];\\n        uint256 lastTokenIndex = ownerData.ownedTokens.length - 1;\\n        uint256 lastTokenId = ownerData.ownedTokens[lastTokenIndex];\\n        uint256 tokenIndex = ownerData.ownedTokensIndex[tokenId_];\\n\\n        ownerData.ownedTokens[tokenIndex] = lastTokenId;\\n        ownerData.ownedTokensIndex[lastTokenId] = tokenIndex;\\n\\n        delete ownerData.ownedTokensIndex[tokenId_];\\n        ownerData.ownedTokens.pop();\\n    }\\n\\n    function _addTokenToAllTokensEnumeration(TokenData memory tokenData_) private {\\n        _allTokensIndex[tokenData_.id] = _allTokens.length;\\n        _allTokens.push(tokenData_);\\n    }\\n\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId_) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId_];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        TokenData memory lastTokenData = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenData; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenData.id] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId_];\\n        _allTokens.pop();\\n    }\\n\\n    function _approve(address to_, uint256 tokenId_) internal virtual {\\n        _allTokens[_allTokensIndex[tokenId_]].approved = to_;\\n        emit Approval(ERC3525.ownerOf(tokenId_), to_, tokenId_);\\n    }\\n\\n    function _approveValue(\\n        uint256 tokenId_,\\n        address to_,\\n        uint256 value_\\n    ) internal virtual {\\n        require(to_ != address(0), \\\"ERC3525: approve value to the zero address\\\");\\n        if (!_existApproveValue(to_, tokenId_)) {\\n            _allTokens[_allTokensIndex[tokenId_]].valueApprovals.push(to_);\\n        }\\n        _approvedValues[tokenId_][to_] = value_;\\n\\n        emit ApprovalValue(tokenId_, to_, value_);\\n    }\\n\\n    function _clearApprovedValues(uint256 tokenId_) internal virtual {\\n        TokenData storage tokenData = _allTokens[_allTokensIndex[tokenId_]];\\n        uint256 length = tokenData.valueApprovals.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            address approval = tokenData.valueApprovals[i];\\n            delete _approvedValues[tokenId_][approval];\\n        }\\n    }\\n\\n    function _existApproveValue(address to_, uint256 tokenId_) internal view virtual returns (bool) {\\n        uint256 length = _allTokens[_allTokensIndex[tokenId_]].valueApprovals.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (_allTokens[_allTokensIndex[tokenId_]].valueApprovals[i] == to_) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function _transferValue(\\n        uint256 fromTokenId_,\\n        uint256 toTokenId_,\\n        uint256 value_\\n    ) internal virtual {\\n        require(_exists(fromTokenId_), \\\"ERC3525: transfer from invalid token ID\\\");\\n        require(_exists(toTokenId_), \\\"ERC3525: transfer to invalid token ID\\\");\\n\\n        TokenData storage fromTokenData = _allTokens[_allTokensIndex[fromTokenId_]];\\n        TokenData storage toTokenData = _allTokens[_allTokensIndex[toTokenId_]];\\n\\n        require(fromTokenData.balance >= value_, \\\"ERC3525: insufficient balance for transfer\\\");\\n        require(fromTokenData.slot == toTokenData.slot, \\\"ERC3525: transfer to token with different slot\\\");\\n\\n        _beforeValueTransfer(\\n            fromTokenData.owner,\\n            toTokenData.owner,\\n            fromTokenId_,\\n            toTokenId_,\\n            fromTokenData.slot,\\n            value_\\n        );\\n\\n        fromTokenData.balance -= value_;\\n        toTokenData.balance += value_;\\n\\n        emit TransferValue(fromTokenId_, toTokenId_, value_);\\n\\n        _afterValueTransfer(\\n            fromTokenData.owner,\\n            toTokenData.owner,\\n            fromTokenId_,\\n            toTokenId_,\\n            fromTokenData.slot,\\n            value_\\n        );\\n\\n        require(\\n            _checkOnERC3525Received(fromTokenId_, toTokenId_, value_, \\\"\\\"),\\n            \\\"ERC3525: transfer to non ERC3525Receiver\\\"\\n        );\\n    }\\n\\n    function _transferTokenId(\\n        address from_,\\n        address to_,\\n        uint256 tokenId_\\n    ) internal virtual {\\n        require(ERC3525.ownerOf(tokenId_) == from_, \\\"ERC3525: transfer from invalid owner\\\");\\n        require(to_ != address(0), \\\"ERC3525: transfer to the zero address\\\");\\n\\n        uint256 slot = ERC3525.slotOf(tokenId_);\\n        uint256 value = ERC3525.balanceOf(tokenId_);\\n\\n        _beforeValueTransfer(from_, to_, tokenId_, tokenId_, slot, value);\\n\\n        _approve(address(0), tokenId_);\\n        _clearApprovedValues(tokenId_);\\n\\n        _removeTokenFromOwnerEnumeration(from_, tokenId_);\\n        _addTokenToOwnerEnumeration(to_, tokenId_);\\n\\n        emit Transfer(from_, to_, tokenId_);\\n\\n        _afterValueTransfer(from_, to_, tokenId_, tokenId_, slot, value);\\n    }\\n\\n    function _safeTransferTokenId(\\n        address from_,\\n        address to_,\\n        uint256 tokenId_,\\n        bytes memory data_\\n    ) internal virtual {\\n        _transferTokenId(from_, to_, tokenId_);\\n        require(\\n            _checkOnERC721Received(from_, to_, tokenId_, data_),\\n            \\\"ERC3525: transfer to non ERC721Receiver\\\"\\n        );\\n    }\\n\\n    function _checkOnERC3525Received( \\n        uint256 fromTokenId_, \\n        uint256 toTokenId_, \\n        uint256 value_, \\n        bytes memory data_\\n    ) private returns (bool) {\\n        address to = ERC3525.ownerOf(toTokenId_);\\n        if (to.isContract() && IERC165(to).supportsInterface(type(IERC3525Receiver).interfaceId)) {\\n            try\\n                IERC3525Receiver(to).onERC3525Received(_msgSender(), fromTokenId_, toTokenId_, value_, data_) returns (bytes4 retval) {\\n                return retval == IERC3525Receiver.onERC3525Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert( \\\"ERC3525: transfer to non ERC3525Receiver\\\");\\n                } else {\\n                    // solhint-disable-next-line\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from_ address representing the previous owner of the given token ID\\n     * @param to_ target address that will receive the tokens\\n     * @param tokenId_ uint256 ID of the token to be transferred\\n     * @param data_ bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from_,\\n        address to_,\\n        uint256 tokenId_,\\n        bytes memory data_\\n    ) private returns (bool) {\\n        if (to_.isContract() && IERC165(to_).supportsInterface(type(IERC721Receiver).interfaceId)) {\\n            try \\n                IERC721Receiver(to_).onERC721Received(_msgSender(), from_, tokenId_, data_) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver\\\");\\n                } else {\\n                    // solhint-disable-next-line\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /* solhint-disable */\\n    function _beforeValueTransfer(\\n        address from_,\\n        address to_,\\n        uint256 fromTokenId_,\\n        uint256 toTokenId_,\\n        uint256 slot_,\\n        uint256 value_\\n    ) internal virtual {}\\n\\n    function _afterValueTransfer(\\n        address from_,\\n        address to_,\\n        uint256 fromTokenId_,\\n        uint256 toTokenId_,\\n        uint256 slot_,\\n        uint256 value_\\n    ) internal virtual {}\\n    /* solhint-enable */\\n\\n    function _setMetadataDescriptor(address metadataDescriptor_) internal virtual {\\n        metadataDescriptor = IERC3525MetadataDescriptor(metadataDescriptor_);\\n        emit SetMetadataDescriptor(metadataDescriptor_);\\n    }\\n\\n    function _createOriginalTokenId() internal virtual returns (uint256) {\\n         _tokenIdGenerator.increment();\\n        return _tokenIdGenerator.current();\\n    }\\n\\n    function _createDerivedTokenId(uint256 fromTokenId_) internal virtual returns (uint256) {\\n        fromTokenId_;\\n        return _createOriginalTokenId();\\n    }\\n}\\n\",\"keccak256\":\"0x65e6ed72e554181458e364ea690437e16664c4ccc0447424e346a90daa2d66ae\",\"license\":\"MIT\"},\"@solvprotocol/erc-3525/IERC3525.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-3525 Semi-Fungible Token Standard\\n * @dev See https://eips.ethereum.org/EIPS/eip-3525\\n * Note: the ERC-165 identifier for this interface is 0xc97ae3d5.\\n */\\ninterface IERC3525 is IERC165, IERC721 {\\n    /**\\n     * @dev MUST emit when value of a token is transferred to another token with the same slot,\\n     *  including zero value transfers (_value == 0) as well as transfers when tokens are created\\n     *  (`_fromTokenId` == 0) or destroyed (`_toTokenId` == 0).\\n     * @param _fromTokenId The token id to transfer value from\\n     * @param _toTokenId The token id to transfer value to\\n     * @param _value The transferred value\\n     */\\n    event TransferValue(uint256 indexed _fromTokenId, uint256 indexed _toTokenId, uint256 _value);\\n\\n    /**\\n     * @dev MUST emits when the approval value of a token is set or changed.\\n     * @param _tokenId The token to approve\\n     * @param _operator The operator to approve for\\n     * @param _value The maximum value that `_operator` is allowed to manage\\n     */\\n    event ApprovalValue(uint256 indexed _tokenId, address indexed _operator, uint256 _value);\\n\\n    /**\\n     * @dev MUST emit when the slot of a token is set or changed.\\n     * @param _tokenId The token of which slot is set or changed\\n     * @param _oldSlot The previous slot of the token\\n     * @param _newSlot The updated slot of the token\\n     */ \\n    event SlotChanged(uint256 indexed _tokenId, uint256 indexed _oldSlot, uint256 indexed _newSlot);\\n\\n    /**\\n     * @notice Get the number of decimals the token uses for value - e.g. 6, means the user\\n     *  representation of the value of a token can be calculated by dividing it by 1,000,000.\\n     *  Considering the compatibility with third-party wallets, this function is defined as\\n     *  `valueDecimals()` instead of `decimals()` to avoid conflict with ERC20 tokens.\\n     * @return The number of decimals for value\\n     */\\n    function valueDecimals() external view returns (uint8);\\n\\n    /**\\n     * @notice Get the value of a token.\\n     * @param _tokenId The token for which to query the balance\\n     * @return The value of `_tokenId`\\n     */\\n    function balanceOf(uint256 _tokenId) external view returns (uint256);\\n\\n    /**\\n     * @notice Get the slot of a token.\\n     * @param _tokenId The identifier for a token\\n     * @return The slot of the token\\n     */\\n    function slotOf(uint256 _tokenId) external view returns (uint256);\\n\\n    /**\\n     * @notice Allow an operator to manage the value of a token, up to the `_value` amount.\\n     * @dev MUST revert unless caller is the current owner, an authorized operator, or the approved\\n     *  address for `_tokenId`.\\n     *  MUST emit ApprovalValue event.\\n     * @param _tokenId The token to approve\\n     * @param _operator The operator to be approved\\n     * @param _value The maximum value of `_toTokenId` that `_operator` is allowed to manage\\n     */\\n    function approve(\\n        uint256 _tokenId,\\n        address _operator,\\n        uint256 _value\\n    ) external payable;\\n\\n    /**\\n     * @notice Get the maximum value of a token that an operator is allowed to manage.\\n     * @param _tokenId The token for which to query the allowance\\n     * @param _operator The address of an operator\\n     * @return The current approval value of `_tokenId` that `_operator` is allowed to manage\\n     */\\n    function allowance(uint256 _tokenId, address _operator) external view returns (uint256);\\n\\n    /**\\n     * @notice Transfer value from a specified token to another specified token with the same slot.\\n     * @dev Caller MUST be the current owner, an authorized operator or an operator who has been\\n     *  approved the whole `_fromTokenId` or part of it.\\n     *  MUST revert if `_fromTokenId` or `_toTokenId` is zero token id or does not exist.\\n     *  MUST revert if slots of `_fromTokenId` and `_toTokenId` do not match.\\n     *  MUST revert if `_value` exceeds the balance of `_fromTokenId` or its allowance to the\\n     *  operator.\\n     *  MUST emit `TransferValue` event.\\n     * @param _fromTokenId The token to transfer value from\\n     * @param _toTokenId The token to transfer value to\\n     * @param _value The transferred value\\n     */\\n    function transferFrom(\\n        uint256 _fromTokenId,\\n        uint256 _toTokenId,\\n        uint256 _value\\n    ) external payable;\\n\\n    /**\\n     * @notice Transfer value from a specified token to an address. The caller should confirm that\\n     *  `_to` is capable of receiving ERC3525 tokens.\\n     * @dev This function MUST create a new ERC3525 token with the same slot for `_to` to receive\\n     *  the transferred value.\\n     *  MUST revert if `_fromTokenId` is zero token id or does not exist.\\n     *  MUST revert if `_to` is zero address.\\n     *  MUST revert if `_value` exceeds the balance of `_fromTokenId` or its allowance to the\\n     *  operator.\\n     *  MUST emit `Transfer` and `TransferValue` events.\\n     * @param _fromTokenId The token to transfer value from\\n     * @param _to The address to transfer value to\\n     * @param _value The transferred value\\n     * @return ID of the new token created for `_to` which receives the transferred value\\n     */\\n    function transferFrom(\\n        uint256 _fromTokenId,\\n        address _to,\\n        uint256 _value\\n    ) external payable returns (uint256);\\n}\\n\",\"keccak256\":\"0x8f1ca15192aada05ca6dba9f0b1b12652e1cf17bd4b28045b4f5c9dba2837f89\",\"license\":\"MIT\"},\"@solvprotocol/erc-3525/IERC3525Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title EIP-3525 token receiver interface\\n * @dev Interface for a smart contract that wants to be informed by EIP-3525 contracts when \\n *  receiving values from ANY addresses or EIP-3525 tokens.\\n * Note: the EIP-165 identifier for this interface is 0x009ce20b.\\n */\\ninterface IERC3525Receiver {\\n    /**\\n     * @notice Handle the receipt of an EIP-3525 token value.\\n     * @dev An EIP-3525 smart contract MUST check whether this function is implemented by the \\n     *  recipient contract, if the recipient contract implements this function, the EIP-3525 \\n     *  contract MUST call this function after a value transfer (i.e. `transferFrom(uint256,\\n     *  uint256,uint256,bytes)`).\\n     *  MUST return 0x009ce20b (i.e. `bytes4(keccak256('onERC3525Received(address,uint256,uint256,\\n     *  uint256,bytes)'))`) if the transfer is accepted.\\n     *  MUST revert or return any value other than 0x009ce20b if the transfer is rejected.\\n     * @param _operator The address which triggered the transfer\\n     * @param _fromTokenId The token id to transfer value from\\n     * @param _toTokenId The token id to transfer value to\\n     * @param _value The transferred value\\n     * @param _data Additional data with no specified format\\n     * @return `bytes4(keccak256('onERC3525Received(address,uint256,uint256,uint256,bytes)'))` \\n     *  unless the transfer is rejected.\\n     */\\n    function onERC3525Received(address _operator, uint256 _fromTokenId, uint256 _toTokenId, uint256 _value, bytes calldata _data) external returns (bytes4);\\n\\n}\",\"keccak256\":\"0xf344324b7556fd4446567aa07d69a82e8a9dde912d1bd0c60c82a457f7c8dd9c\",\"license\":\"MIT\"},\"@solvprotocol/erc-3525/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/** \\n * @title ERC-721 Non-Fungible Token Standard\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n *  Note: the ERC-165 identifier for this interface is 0x80ac58cd.\\n */\\ninterface IERC721 is IERC165 {\\n    /** \\n     * @dev This emits when ownership of any NFT changes by any mechanism.\\n     *  This event emits when NFTs are created (`from` == 0) and destroyed\\n     *  (`to` == 0). Exception: during contract creation, any number of NFTs\\n     *  may be created and assigned without emitting Transfer. At the time of\\n     *  any transfer, the approved address for that NFT (if any) is reset to none.\\n     */\\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\\n\\n    /**\\n     * @dev This emits when the approved address for an NFT is changed or\\n     *  reaffirmed. The zero address indicates there is no approved address.\\n     *  When a Transfer event emits, this also indicates that the approved\\n     *  address for that NFT (if any) is reset to none.\\n     */\\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\\n\\n    /**\\n     * @dev This emits when an operator is enabled or disabled for an owner.\\n     *  The operator can manage all NFTs of the owner.\\n     */\\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\n\\n    /**\\n     * @notice Count all NFTs assigned to an owner\\n     * @dev NFTs assigned to the zero address are considered invalid, and this\\n     *  function throws for queries about the zero address.\\n     * @param _owner An address for whom to query the balance\\n     * @return The number of NFTs owned by `_owner`, possibly zero\\n     */\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    /**\\n     * @notice Find the owner of an NFT\\n     * @dev NFTs assigned to zero address are considered invalid, and queries\\n     *  about them do throw.\\n     * @param _tokenId The identifier for an NFT\\n     * @return The address of the owner of the NFT\\n     */\\n    function ownerOf(uint256 _tokenId) external view returns (address);\\n\\n    /**\\n     * @notice Transfers the ownership of an NFT from one address to another address\\n     * @dev Throws unless `msg.sender` is the current owner, an authorized\\n     *  operator, or the approved address for this NFT. Throws if `_from` is\\n     *  not the current owner. Throws if `_to` is the zero address. Throws if\\n     *  `_tokenId` is not a valid NFT. When transfer is complete, this function\\n     *  checks if `_to` is a smart contract (code size > 0). If so, it calls\\n     *  `onERC721Received` on `_to` and throws if the return value is not\\n     *  `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n     * @param _from The current owner of the NFT\\n     * @param _to The new owner\\n     * @param _tokenId The NFT to transfer\\n     * @param data Additional data with no specified format, sent in call to `_to`\\n     */\\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata data) external payable;\\n\\n    /**\\n     * @notice Transfers the ownership of an NFT from one address to another address\\n     * @dev This works identically to the other function with an extra data parameter,\\n     *  except this function just sets data to \\\"\\\".\\n     * @param _from The current owner of the NFT\\n     * @param _to The new owner\\n     * @param _tokenId The NFT to transfer\\n     */\\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\\n\\n    /**\\n     * @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\\n     *  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\\n     *  THEY MAY BE PERMANENTLY LOST\\n     * @dev Throws unless `msg.sender` is the current owner, an authorized\\n     *  operator, or the approved address for this NFT. Throws if `_from` is\\n     *  not the current owner. Throws if `_to` is the zero address. Throws if\\n     *  `_tokenId` is not a valid NFT.\\n     * @param _from The current owner of the NFT\\n     * @param _to The new owner\\n     * @param _tokenId The NFT to transfer\\n     */\\n    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\\n\\n    /**\\n     * @notice Change or reaffirm the approved address for an NFT\\n     * @dev The zero address indicates there is no approved address.\\n     *  Throws unless `msg.sender` is the current NFT owner, or an authorized\\n     *  operator of the current owner.\\n     * @param _approved The new approved NFT controller\\n     * @param _tokenId The NFT to approve\\n     */\\n    function approve(address _approved, uint256 _tokenId) external payable;\\n\\n    /**\\n     * @notice Enable or disable approval for a third party (\\\"operator\\\") to manage\\n     *  all of `msg.sender`'s assets\\n     * @dev Emits the ApprovalForAll event. The contract MUST allow\\n     *  multiple operators per owner.\\n     * @param _operator Address to add to the set of authorized operators\\n     * @param _approved True if the operator is approved, false to revoke approval\\n     */\\n    function setApprovalForAll(address _operator, bool _approved) external;\\n\\n    /**\\n     * @notice Get the approved address for a single NFT\\n     * @dev Throws if `_tokenId` is not a valid NFT.\\n     * @param _tokenId The NFT to find the approved address for\\n     * @return The approved address for this NFT, or the zero address if there is none\\n     */\\n    function getApproved(uint256 _tokenId) external view returns (address);\\n\\n    /**\\n     * @notice Query if an address is an authorized operator for another address\\n     * @param _owner The address that owns the NFTs\\n     * @param _operator The address that acts on behalf of the owner\\n     * @return True if `_operator` is an approved operator for `_owner`, false otherwise\\n     */\\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9c0a2a4a75344a0d5b9a934e6852bfaa3af117073d9bd11e205b3084afc9c0e4\",\"license\":\"MIT\"},\"@solvprotocol/erc-3525/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\\n *  Note: the ERC-165 identifier for this interface is 0x150b7a02.\\n */\\ninterface IERC721Receiver {\\n    /** \\n     * @notice Handle the receipt of an NFT\\n     * @dev The ERC721 smart contract calls this function on the recipient\\n     *  after a `transfer`. This function MAY throw to revert and reject the\\n     *  transfer. Return of other than the magic value MUST result in the\\n     *  transaction being reverted.\\n     *  Note: the contract address is always the message sender.\\n     * @param _operator The address which called `safeTransferFrom` function\\n     * @param _from The address which previously owned the token\\n     * @param _tokenId The NFT identifier which is being transferred\\n     * @param _data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n     *  unless throwing\\n     */\\n    function onERC721Received(\\n        address _operator, \\n        address _from, \\n        uint256 _tokenId, \\n        bytes calldata _data\\n    ) external returns(bytes4);\\n}\\n\",\"keccak256\":\"0xcb024ad521acfe8596ee274954bcae7dfab6cb2beba3c4880315ea322d4d590e\",\"license\":\"MIT\"},\"@solvprotocol/erc-3525/extensions/IERC3525Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC3525.sol\\\";\\nimport \\\"./IERC721Metadata.sol\\\";\\n\\n/**\\n * @title ERC-3525 Semi-Fungible Token Standard, optional extension for metadata\\n * @dev Interfaces for any contract that wants to support query of the Uniform Resource Identifier\\n *  (URI) for the ERC3525 contract as well as a specified slot.\\n *  Because of the higher reliability of data stored in smart contracts compared to data stored in\\n *  centralized systems, it is recommended that metadata, including `contractURI`, `slotURI` and\\n *  `tokenURI`, be directly returned in JSON format, instead of being returned with a url pointing\\n *  to any resource stored in a centralized system.\\n *  See https://eips.ethereum.org/EIPS/eip-3525\\n * Note: the ERC-165 identifier for this interface is 0xe1600902.\\n */\\ninterface IERC3525Metadata is IERC3525, IERC721Metadata {\\n    /**\\n     * @notice Returns the Uniform Resource Identifier (URI) for the current ERC3525 contract.\\n     * @dev This function SHOULD return the URI for this contract in JSON format, starting with\\n     *  header `data:application/json;`.\\n     *  See https://eips.ethereum.org/EIPS/eip-3525 for the JSON schema for contract URI.\\n     * @return The JSON formatted URI of the current ERC3525 contract\\n     */\\n    function contractURI() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the Uniform Resource Identifier (URI) for the specified slot.\\n     * @dev This function SHOULD return the URI for `_slot` in JSON format, starting with header\\n     *  `data:application/json;`.\\n     *  See https://eips.ethereum.org/EIPS/eip-3525 for the JSON schema for slot URI.\\n     * @return The JSON formatted URI of `_slot`\\n     */\\n    function slotURI(uint256 _slot) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x738d04b5e4e0a6a5c1e589ca74eb7896505a9277c089c17c1db6fe552a552abf\",\"license\":\"MIT\"},\"@solvprotocol/erc-3525/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n *  Note: the ERC-165 identifier for this interface is 0x780e9d63.\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /** \\n     * @notice Count NFTs tracked by this contract\\n     * @return A count of valid NFTs tracked by this contract, where each one of\\n     *  them has an assigned and queryable owner not equal to the zero address\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /** \\n     * @notice Enumerate valid NFTs\\n     * @dev Throws if `_index` >= `totalSupply()`.\\n     * @param _index A counter less than `totalSupply()`\\n     * @return The token identifier for the `_index`th NFT,\\n     *  (sort order not specified)\\n     */\\n    function tokenByIndex(uint256 _index) external view returns (uint256);\\n\\n    /** \\n     * @notice Enumerate NFTs assigned to an owner\\n     * @dev Throws if `_index` >= `balanceOf(_owner)` or if\\n     *  `_owner` is the zero address, representing invalid NFTs.\\n     * @param _owner An address where we are interested in NFTs owned by them\\n     * @param _index A counter less than `balanceOf(_owner)`\\n     * @return The token identifier for the `_index`th NFT assigned to `_owner`,\\n     *  (sort order not specified)\\n     */\\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xff8f739cc9d55d4e8dca831c04b8e15324bed347d3dee05e8ff810507db39ba3\",\"license\":\"MIT\"},\"@solvprotocol/erc-3525/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n *  Note: the ERC-165 identifier for this interface is 0x5b5e139f.\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @notice A descriptive name for a collection of NFTs in this contract\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @notice An abbreviated name for NFTs in this contract\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\n     * @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\\n     *  3986. The URI may point to a JSON file that conforms to the \\\"ERC721\\n     *  Metadata JSON Schema\\\".\\n     */\\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x852eb5addd0be03f06bd9abfe58e8284e1b1b732ea47190ccdd6258712dc7d1d\",\"license\":\"MIT\"},\"@solvprotocol/erc-3525/periphery/interface/IERC3525MetadataDescriptor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC3525MetadataDescriptor {\\n\\n    function constructContractURI() external view returns (string memory);\\n\\n    function constructSlotURI(uint256 slot) external view returns (string memory);\\n    \\n    function constructTokenURI(uint256 tokenId) external view returns (string memory);\\n\\n}\",\"keccak256\":\"0xc297d848cece83ff6d6d67e6f884667425445776b3b5c8fd185c4a01a2f79de7\",\"license\":\"MIT\"},\"contracts/GatewayToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@solvprotocol/erc-3525/ERC3525.sol\\\";\\nimport \\\"@solvprotocol/erc-3525/IERC3525.sol\\\";\\nimport \\\"./TokenBitMask.sol\\\";\\nimport \\\"./interfaces/IERC721Freezeble.sol\\\";\\nimport \\\"./interfaces/IGatewayToken.sol\\\";\\nimport \\\"./interfaces/IERC721Expirable.sol\\\";\\nimport \\\"./interfaces/IERC721Revokable.sol\\\";\\nimport \\\"./MultiERC2771Context.sol\\\";\\nimport \\\"./library/Charge.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"./ParameterizedAccessControl.sol\\\";\\n\\n\\n/**\\n * @dev Gateway Token contract is responsible for managing Identity.com KYC gateway tokens \\n * those tokens represent completed KYC with attached identity. \\n * Gateway tokens using ERC721 standard with custom extentions.\\n *\\n * Contract handles multiple levels of access such as Network Authority (may represent a specific regulator body) \\n * Gatekeepers (Identity.com network parties who can mint/burn/freeze gateway tokens) and overall system Admin who can add\\n * new Gatekeepers and Network Authorities\\n */\\ncontract GatewayToken is\\nMultiERC2771Context,\\nERC165,\\nERC3525,\\nParameterizedAccessControl,\\nIERC721Freezeble,\\nIERC721Expirable,\\nIERC721Revokable,\\nIGatewayToken,\\nTokenBitMask\\n{\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    enum TokenState {\\n        ACTIVE, FROZEN, REVOKED\\n    }\\n\\n    // Gateway Token controller contract address\\n    address public controller;\\n\\n    // Gateway token transfer restrictions\\n    bool public isTransfersRestricted;\\n\\n    // Off-chain DAO governance access control\\n    mapping(uint256 => bool) public isNetworkDAOGoverned;\\n\\n    // Access control roles\\n    bytes32 public constant DAO_MANAGER_ROLE = keccak256(\\\"DAO_MANAGER_ROLE\\\");\\n    bytes32 public constant GATEKEEPER_ROLE = keccak256(\\\"GATEKEEPER_ROLE\\\");\\n    bytes32 public constant NETWORK_AUTHORITY_ROLE = keccak256(\\\"NETWORK_AUTHORITY_ROLE\\\");\\n\\n    // Optional mapping for gateway token Identities (via TokenURI)\\n    mapping(uint256 => string) private tokenURIs;\\n\\n    // Optional mapping for gateway token bitmaps\\n    mapping(uint256 => TokenState) private tokenStates;\\n\\n    // Optional Mapping from token ID to expiration date\\n    mapping(uint256 => uint256) private expirations;\\n\\n    mapping(uint256 => string) private networks;\\n\\n    // @dev Modifier to make a function callable only when token transfers not restricted.\\n    modifier whenTransfersNotRestricted() {\\n        require(!transfersRestricted(), \\\"TRANSFERS RESTRICTED\\\");\\n        _;\\n    }\\n\\n    // @dev Modifier to make a function callable only when token transfers restricted.\\n    modifier whenTransfersRestricted() {\\n        require(transfersRestricted(), \\\"TRANSFERS NOT RESTRICTED\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Gateway Token constructor initializes the contract by \\n     * setting a `name` and a `symbol` to the gateway token.\\n     *\\n     * Initiates gateway token roles with main system admin,\\n     * `NETWORK_AUTHORITY_ROLE` responsible for adding/removing Gatekeepers and \\n     * `GATEKEEPER_ROLE` responsible for minting/burning/transferring tokens\\n     */\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        address superAdmin,\\n        address flagsStorage,\\n        address[] memory trustedForwarders\\n    )\\n    MultiERC2771Context(trustedForwarders)\\n    ERC3525(name, symbol, 0) {\\n        isTransfersRestricted = true;\\n        _setFlagsStorage(flagsStorage);\\n        _superAdmins[superAdmin] = true;\\n    }\\n\\n    function _msgSender() internal view virtual override(MultiERC2771Context, Context) returns (address sender) {\\n        return MultiERC2771Context._msgSender();\\n    }\\n\\n    function _msgData() internal view virtual override(MultiERC2771Context, Context) returns (bytes calldata) {\\n        return MultiERC2771Context._msgData();\\n    }\\n\\n    function addForwarder(address forwarder) public override(MultiERC2771Context) onlySuperAdmin {\\n        super.addForwarder(forwarder);\\n    }\\n\\n    function removeForwarder(address forwarder) public override(MultiERC2771Context) onlySuperAdmin {\\n        super.removeForwarder(forwarder);\\n    }\\n\\n    /**\\n     * @dev Returns true if gateway token owner transfers restricted, and false otherwise.\\n     */\\n    function transfersRestricted() public view virtual returns (bool) {\\n        return isTransfersRestricted;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, ERC3525, ParameterizedAccessControl) returns (bool) {\\n        return\\n        interfaceId == type(IERC3525).interfaceId ||\\n        interfaceId == type(IERC721).interfaceId ||\\n        interfaceId == type(IERC721Metadata).interfaceId ||\\n        super.supportsInterface(interfaceId);\\n    }\\n\\n    function createNetwork(uint256 network, string memory name, bool daoGoverned, address daoManager) external virtual {\\n        require(bytes(networks[network]).length == 0, \\\"NETWORK ALREADY EXISTS\\\");\\n\\n        networks[network] = name;\\n\\n        _setupRole(NETWORK_AUTHORITY_ROLE, network, _msgSender());\\n\\n        if (daoGoverned) {\\n            isNetworkDAOGoverned[network] = daoGoverned;\\n\\n            require(daoManager != address(0), \\\"INCORRECT ADDRESS\\\");\\n            // require(daoManager.isContract(), \\\"NON CONTRACT EXECUTOR\\\"); uncomment while testing with Gnosis Multisig\\n\\n            _setupRole(DAO_MANAGER_ROLE, network, daoManager);\\n            _setupRole(NETWORK_AUTHORITY_ROLE, network, daoManager);\\n            _setRoleAdmin(NETWORK_AUTHORITY_ROLE, network, DAO_MANAGER_ROLE);\\n            _setRoleAdmin(GATEKEEPER_ROLE, network, DAO_MANAGER_ROLE);\\n        } else {\\n            _setRoleAdmin(NETWORK_AUTHORITY_ROLE, network, NETWORK_AUTHORITY_ROLE);\\n            _setRoleAdmin(GATEKEEPER_ROLE, network, NETWORK_AUTHORITY_ROLE);\\n        }\\n    }\\n\\n    function renameNetwork(uint256 network, string memory name) external virtual {\\n        require(bytes(networks[network]).length != 0, \\\"NETWORK DOES NOT EXIST\\\");\\n        require(hasRole(NETWORK_AUTHORITY_ROLE, network, _msgSender()), \\\"NOT AUTHORIZED\\\");\\n\\n        networks[network] = name;\\n    }\\n\\n    /**\\n    * @dev Triggers to get identity attached to specific gateway token\\n    * @param tokenId Gateway token id\\n    */\\n    function getIdentity(uint256 tokenId) public view virtual returns (string memory) {\\n        return tokenURI(tokenId);\\n    }\\n\\n    function _getTokenIdsByOwnerAndNetwork(address owner, uint256 network) internal view returns (uint256[] memory, uint256) {\\n        uint256 balance = balanceOf(owner);\\n        uint256[] memory tokenIds = new uint256[](balance);\\n        uint256 count = 0;\\n        for (uint256 i = 0; i < balance; i++) {\\n            uint256 tokenId = tokenOfOwnerByIndex(owner, i);\\n            if (slotOf(tokenId) == network) {\\n                tokenIds[count++] = tokenId;\\n            }\\n        }\\n        return (tokenIds, count);\\n    }\\n\\n    function getTokenIdsByOwnerAndNetwork(address owner, uint256 network) external view returns (uint256[] memory) {\\n        (uint256[] memory tokenIds, uint256 count) = _getTokenIdsByOwnerAndNetwork(owner, network);\\n        uint256[] memory tokenIdsResized = new uint256[](count);\\n        for (uint256 i = 0; i < count; i++) {\\n            tokenIdsResized[i] = tokenIds[i];\\n        }\\n        return tokenIdsResized;\\n    }\\n\\n    /**\\n    * @dev Triggered by external contract to verify the validity of the default token for `owner`.\\n    *\\n    * Checks owner has any token on gateway token contract, `tokenId` still active, and not expired.\\n    */\\n    function verifyToken(address owner, uint256 network) external view virtual returns (bool) {\\n        (uint256[] memory tokenIds, uint256 count) = _getTokenIdsByOwnerAndNetwork(owner, network);\\n\\n        for (uint256 i = 0; i < count; i++) {\\n            if (tokenIds[i] != 0) {\\n                if (_existsAndActive(tokenIds[i], false)) return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    /**\\n    * @dev Triggered by external contract to verify the validity of the default token for `owner`.\\n    *\\n    * Checks owner has any token on gateway token contract, `tokenId` still active, and not expired.\\n    */\\n    function verifyToken(uint256 tokenId) external view virtual returns (bool) {\\n        return _existsAndActive(tokenId, false);\\n    }\\n\\n    /**\\n    * @dev Triggers to get all information gateway token related to specified `tokenId`\\n    * @param tokenId Gateway token id\\n    */\\n    function getToken(uint256 tokenId) public view virtual override\\n    returns (\\n        address owner,\\n        uint8 state,\\n        string memory identity,\\n        uint256 expiration,\\n        uint256 bitmask\\n    )\\n    {\\n        owner = ownerOf(tokenId);\\n        state = uint8(tokenStates[tokenId]);\\n        identity = tokenURIs[tokenId];\\n        expiration = expirations[tokenId];\\n        bitmask = _getBitMask(tokenId);\\n\\n        return (owner, state, identity, expiration, bitmask);\\n    }\\n\\n    /**\\n    * @dev Triggers to get gateway token state with specified `tokenId`\\n    * @param tokenId Gateway token id\\n    */\\n    function getTokenState(uint256 tokenId) public view virtual override returns (uint8 state) {\\n        state = uint8(tokenStates[tokenId]);\\n\\n        return state;\\n    }\\n\\n    /**\\n    * @dev Returns whether `tokenId` exists and not frozen.\\n    */\\n    function _existsAndActive(uint256 tokenId, bool allowExpired) internal view virtual returns (bool) {\\n        // check state before anything else. This reduces the overhead, and avoids a revert, if the token does not exist.\\n        TokenState state = tokenStates[tokenId];\\n        if (state != TokenState.ACTIVE) return false;\\n\\n        address owner = ownerOf(tokenId);\\n        if (expirations[tokenId] != 0 && !allowExpired) {\\n            return owner != address(0) && block.timestamp <= expirations[tokenId];\\n        } else {\\n            return owner != address(0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual override returns (bool) {\\n        require(!transfersRestricted(), \\\"TRANSFERS RESTRICTED\\\");\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ownerOf(tokenId);\\n        uint256 network = slotOf(tokenId);\\n        if (spender == owner) {\\n            return true;\\n        } else {\\n            return (getApproved(tokenId) == spender || isApprovedForAll(owner, spender) || hasRole(GATEKEEPER_ROLE, network, spender));\\n        }\\n    }\\n\\n    /**\\n    * @dev Triggers to burn gateway token\\n    * @param tokenId Gateway token id\\n    */\\n    function burn(uint256 tokenId) public virtual {\\n        require(hasRole(GATEKEEPER_ROLE, slotOf(tokenId), _msgSender()), \\\"MUST BE GATEKEEPER\\\");\\n        _burn(tokenId);\\n    }\\n\\n    /**\\n    * @dev Triggers to mint gateway token\\n    * @param to Gateway token owner\\n    * @param network Gateway token type\\n    * @param mask The bitmask for the token\\n    * @param charge The charge details for token issuance (ignored here - handled if at all by the forwarding contract)\\n    */\\n    function mint(address to, uint256 network, uint256 expiration, uint256 mask, Charge calldata charge) public virtual {\\n        require(hasRole(GATEKEEPER_ROLE, network, _msgSender()), \\\"MUST BE GATEKEEPER\\\");\\n\\n        uint256 tokenId = ERC3525._mint(to, network, 1);\\n\\n        if (expiration > 0) {\\n            expirations[tokenId] = expiration;\\n        }\\n\\n        if (mask > 0) {\\n            _setBitMask(tokenId, mask);\\n        }\\n    }\\n\\n    function revoke(uint256 tokenId) public virtual override {\\n        require(hasRole(GATEKEEPER_ROLE, slotOf(tokenId), _msgSender()), \\\"MUST BE GATEKEEPER\\\");\\n\\n        tokenStates[tokenId] = TokenState.REVOKED;\\n\\n        emit Revoke(tokenId);\\n    }\\n\\n    /**\\n    * @dev Triggers to freeze gateway token\\n    * @param tokenId Gateway token id\\n    */\\n    function freeze(uint256 tokenId) public virtual override {\\n        require(hasRole(GATEKEEPER_ROLE, slotOf(tokenId), _msgSender()), \\\"MUST BE GATEKEEPER\\\");\\n\\n        _freeze(tokenId);\\n    }\\n\\n    /**\\n    * @dev Triggers to unfreeze gateway token\\n    * @param tokenId Gateway token id\\n    */\\n    function unfreeze(uint256 tokenId) public virtual override {\\n        require(hasRole(GATEKEEPER_ROLE, slotOf(tokenId), _msgSender()), \\\"MUST BE GATEKEEPER\\\");\\n\\n        _unfreeze(tokenId);\\n    }\\n\\n\\n    /**\\n    * @dev Triggers to get specificied `tokenId` expiration timestamp\\n    * @param tokenId Gateway token id\\n    */\\n    function expiration(uint256 tokenId) public view virtual override returns (uint256) {\\n        require(_exists(tokenId), \\\"TOKEN DOESN'T EXIST OR FROZEN\\\");\\n        return expirations[tokenId];\\n    }\\n\\n    /**\\n    * @dev Triggers to set expiration for tokenId\\n    * @param tokenId Gateway token id\\n    * @param charge The charge details for token refresh (ignored here - handled if at all by the forwarding contract)\\n    */\\n    function setExpiration(uint256 tokenId, uint256 timestamp, Charge calldata charge) public virtual override {\\n        require(hasRole(GATEKEEPER_ROLE, slotOf(tokenId), _msgSender()), \\\"MUST BE GATEKEEPER\\\");\\n\\n        _setExpiration(tokenId, timestamp);\\n    }\\n\\n    /**\\n    * @dev Freezes `tokenId` and it's usage by gateway token owner.\\n    *\\n    * Emits a {Freeze} event.\\n    */\\n    function _freeze(uint256 tokenId) internal virtual {\\n        require(_existsAndActive(tokenId, true), \\\"TOKEN DOESN'T EXISTS OR NOT ACTIVE\\\");\\n\\n        tokenStates[tokenId] = TokenState.FROZEN;\\n\\n        emit Freeze(tokenId);\\n    }\\n\\n    /**\\n    * @dev Unfreezes `tokenId` and it's usage by gateway token owner.\\n    *\\n    * Emits a {Unfreeze} event.\\n    */\\n    function _unfreeze(uint256 tokenId) internal virtual {\\n        require(_exists(tokenId), \\\"TOKEN DOES NOT EXIST\\\");\\n        require(tokenStates[tokenId] == TokenState.FROZEN, \\\"TOKEN NOT FROZEN\\\");\\n\\n        tokenStates[tokenId] = TokenState.ACTIVE;\\n\\n        emit Unfreeze(tokenId);\\n    }\\n\\n    /**\\n    * @dev Sets expiration time for `tokenId`.\\n    */\\n    function _setExpiration(uint256 tokenId, uint256 timestamp) internal virtual {\\n        require(_existsAndActive(tokenId, true), \\\"TOKEN DOES NOT EXIST OR IS INACTIVE\\\");\\n\\n        expirations[tokenId] = timestamp;\\n        emit Expiration(tokenId, timestamp);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    // ===========  ACCESS CONTROL SECTION ============\\n\\n    /**\\n    * @dev Triggers to add new gatekeeper into the system. \\n    * @param gatekeeper Gatekeeper address\\n    */\\n    function addGatekeeper(address gatekeeper, uint256 network) public virtual {\\n        grantRole(GATEKEEPER_ROLE, network, gatekeeper);\\n    }\\n\\n    /**\\n    * @dev Triggers to remove existing gatekeeper from gateway token. \\n    * @param gatekeeper Gatekeeper address\\n    */\\n    function removeGatekeeper(address gatekeeper, uint256 network) public virtual {\\n        revokeRole(GATEKEEPER_ROLE, network, gatekeeper);\\n    }\\n\\n    /**\\n    * @dev Triggers to verify if address has a GATEKEEPER role. \\n    * @param gatekeeper Gatekeeper address\\n    */\\n    function isGatekeeper(address gatekeeper, uint256 network) external view virtual override returns (bool) {\\n        return hasRole(GATEKEEPER_ROLE, network, gatekeeper);\\n    }\\n\\n    /**\\n    * @dev Triggers to add new network authority into the system. \\n    * @param authority Network Authority address\\n    *\\n    * @notice Can be triggered by Gateway Token Controller or any Network Authority\\n    */\\n    function addNetworkAuthority(address authority, uint256 network) external virtual override {\\n        grantRole(NETWORK_AUTHORITY_ROLE, network, authority);\\n    }\\n\\n    /**\\n    * @dev Triggers to remove existing network authority from gateway token. \\n    * @param authority Network Authority address\\n    *\\n    * @notice Can be triggered by Gateway Token Controller or any Network Authority\\n    */\\n    function removeNetworkAuthority(address authority, uint256 network) external virtual override {\\n        revokeRole(NETWORK_AUTHORITY_ROLE, network, authority);\\n    }\\n\\n    /**\\n    * @dev Triggers to verify if authority has a NETWORK_AUTHORITY_ROLE role. \\n    * @param authority Network Authority address\\n    */\\n    function isNetworkAuthority(address authority, uint256 network) external view virtual override returns (bool) {\\n        return hasRole(NETWORK_AUTHORITY_ROLE, network, authority);\\n    }\\n\\n    // ===========  ACCESS CONTROL SECTION ============\\n\\n    /**\\n    * @dev Transfers Gateway Token DAO Manager access from daoManager to `newManager`\\n    * @param newManager Address to transfer DAO Manager role for.\\n    * @notice GatewayToken contract has to be DAO Governed\\n    */\\n    function transferDAOManager(address previousManager, address newManager, uint256 network) public override {\\n        require(isNetworkDAOGoverned[network], \\\"NOT DAO GOVERNED\\\");\\n        require(hasRole(DAO_MANAGER_ROLE, network, previousManager), \\\"INCORRECT OLD MANAGER\\\");\\n        require(hasRole(DAO_MANAGER_ROLE, network, _msgSender()), \\\"MUST BE DAO MANAGER\\\");\\n        require(newManager != address(0), \\\"ZERO ADDRESS\\\");\\n\\n        grantRole(DAO_MANAGER_ROLE, network, newManager);\\n        grantRole(NETWORK_AUTHORITY_ROLE, network, newManager);\\n        grantRole(GATEKEEPER_ROLE, network, newManager);\\n\\n        revokeRole(GATEKEEPER_ROLE, network, previousManager);\\n        revokeRole(NETWORK_AUTHORITY_ROLE, network, previousManager);\\n        revokeRole(DAO_MANAGER_ROLE, network, previousManager);\\n\\n        emit DAOManagerTransferred(previousManager, newManager, network);\\n    }\\n\\n    // ===========  TOKEN BITMASK SECTION ============\\n\\n    /**\\n    * @dev Triggers to update FlagsStorage contract address\\n    * @param flagsStorage FlagsStorage contract address\\n    */\\n    function updateFlagsStorage(address flagsStorage) public onlySuperAdmin {\\n        _setFlagsStorage(flagsStorage);\\n    }\\n\\n    /**\\n    * @dev Triggers to get gateway token bitmask\\n    */\\n    function getTokenBitmask(uint256 tokenId) public view returns (uint256) {\\n        uint256 mask = _getBitMask(tokenId);\\n\\n        return mask;\\n    }\\n\\n    /**\\n    * @dev Triggers to set full bitmask for gateway token with `tokenId`\\n    */\\n    function setBitmask(uint256 tokenId, uint256 mask) public {\\n        require(hasRole(GATEKEEPER_ROLE, slotOf(tokenId), _msgSender()), \\\"MUST BE GATEKEEPER\\\");\\n        _setBitMask(tokenId, mask);\\n    }\\n\\n    /**\\n    * @dev Triggers to add bitmask for gateway token with `tokenId`\\n    */\\n    function addBitmask(uint256 tokenId, uint256 mask) public {\\n        require(hasRole(GATEKEEPER_ROLE, slotOf(tokenId), _msgSender()), \\\"MUST BE GATEKEEPER\\\");\\n        _addBitMask(tokenId, mask);\\n    }\\n\\n    /**\\n    * @dev Triggers to add one bit at particular `index` for gateway token with `tokenId`\\n    */\\n    function addBit(uint256 tokenId, uint8 index) public {\\n        require(hasRole(GATEKEEPER_ROLE, slotOf(tokenId), _msgSender()), \\\"MUST BE GATEKEEPER\\\");\\n        _addBit(tokenId, index);\\n    }\\n\\n    /**\\n    * @dev Triggers to remove bits in `removingMask` for gateway token with `tokenId`\\n    */\\n    function removeBitmask(uint256 tokenId, uint8 removingMask) public {\\n        require(hasRole(GATEKEEPER_ROLE, slotOf(tokenId), _msgSender()), \\\"MUST BE GATEKEEPER\\\");\\n        _removeBits(tokenId, removingMask);\\n    }\\n\\n    /**\\n    * @dev Triggers to clear one bit at particular `index` for gateway token with `tokenId`\\n    */\\n    function removeBit(uint256 tokenId,  uint8 index) public {\\n        require(hasRole(GATEKEEPER_ROLE, slotOf(tokenId), _msgSender()), \\\"MUST BE GATEKEEPER\\\");\\n        _clearBit(tokenId, index);\\n    }\\n\\n    /**\\n    * @dev Triggers to clear bitmask for gateway token with `tokenId`\\n    */\\n    function clearBitmask(uint256 tokenId) public {\\n        require(hasRole(GATEKEEPER_ROLE, slotOf(tokenId), _msgSender()), \\\"MUST BE GATEKEEPER\\\");\\n        _clearBitMask(tokenId);\\n    }\\n}\",\"keccak256\":\"0xcba4fca2d238f1cc6135cf7b65ed1fb73cd1b8b8ccfd219b6ac554dff09d35bc\",\"license\":\"MIT\"},\"contracts/MultiERC2771Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support for multiple trusted forwarders.\\n */\\nabstract contract MultiERC2771Context is Context {\\n\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    mapping (address => bool) private  _trustedForwarders;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(address[] memory trustedForwarders) {\\n        for (uint i = 0; i < trustedForwarders.length; i++) {\\n            _trustedForwarders[trustedForwarders[i]] = true;\\n        }\\n    }\\n\\n    // The overridden function should declare the appropriate access control\\n    function addForwarder(address forwarder) public virtual {\\n        _trustedForwarders[forwarder] = true;\\n    }\\n\\n    // The overridden function should declare the appropriate access control\\n    function removeForwarder(address forwarder) public virtual {\\n        _trustedForwarders[forwarder] = false;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\\n        return _trustedForwarders[forwarder];\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x43b60af07356020abd10c452ba39f8e911b78797d9ddf6fa51f2ce1c09dfadb8\",\"license\":\"MIT\"},\"contracts/ParameterizedAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"./interfaces/IParameterizedAccessControl.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract ParameterizedAccessControl is Context, IParameterizedAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    struct RoleDomain {\\n        mapping(bytes32 => RoleData) roles;\\n    }\\n\\n    mapping(uint256 => RoleDomain) private _roleDomain;\\n    mapping(address => bool) _superAdmins;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role, uint256 domain) {\\n        _checkRole(role, domain);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IParameterizedAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, uint256 domain, address account) public view virtual override returns (bool) {\\n        return _roleDomain[domain].roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role, uint256 domain) internal view virtual {\\n        _checkRole(role, domain, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64}) on domain ([0-9]+)$/\\n     */\\n    function _checkRole(bytes32 role, uint256 domain, address account) internal view virtual {\\n        if (!hasRole(role, domain, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32),\\n                        \\\" on domain \\\", domain\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role, uint256 domain) public view virtual override returns (bytes32) {\\n        return _roleDomain[domain].roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, uint256 domain, address account) public virtual override onlyRole(getRoleAdmin(role, domain), domain) {\\n        _grantRole(role, domain, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, uint256 domain, address account) public virtual override onlyRole(getRoleAdmin(role, domain), domain) {\\n        _revokeRole(role, domain, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, uint256 domain, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, domain, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, uint256 domain, address account) internal virtual {\\n        _grantRole(role, domain, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, uint256 domain, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role, domain);\\n        _roleDomain[domain].roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, domain, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, uint256 domain, address account) internal virtual {\\n        if (!hasRole(role, domain, account)) {\\n            _roleDomain[domain].roles[role].members[account] = true;\\n            emit RoleGranted(role, domain, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, uint256 domain, address account) internal virtual {\\n        if (hasRole(role, domain, account)) {\\n            _roleDomain[domain].roles[role].members[account] = false;\\n            emit RoleRevoked(role, domain, account, _msgSender());\\n        }\\n    }\\n\\n    function isSuperAdmin(address account) public view returns (bool) {\\n        return _superAdmins[account];\\n    }\\n\\n    function setSuperAdmin(address account) public onlySuperAdmin {\\n        emit SuperAdminAdded(account);\\n        _superAdmins[account] = true;\\n    }\\n\\n    function revokeSuperAdmin(address account) external onlySuperAdmin {\\n        emit SuperAdminRemoved(account);\\n        _superAdmins[account] = false;\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is not a super admin\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is not a super admin$/\\n     */\\n    function _checkAdmin(address account) internal view virtual {\\n        if (!isSuperAdmin(account)) {\\n            revert(\\n            string(\\n                abi.encodePacked(\\n                    \\\"AccessControl: account \\\",\\n                    Strings.toHexString(account),\\n                    \\\" is not a super admin\\\"\\n                )\\n            )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account is a super admin. Reverts\\n     * with a standardized message.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is not a super admin$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlySuperAdmin() {\\n        require(isSuperAdmin(_msgSender()), \\\"NOT SUPER ADMIN\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xd3f61a20341d0285d04cdd7f3da5e4ab4e47da58aa10314e993f9529bc214fc9\",\"license\":\"MIT\"},\"contracts/TokenBitMask.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./library/BitMask.sol\\\";\\nimport \\\"./interfaces/IFlagsStorage.sol\\\";\\n\\n/**\\n * @dev TokenBitMask contract is an internal smart contract for Gateway Token\\n * implementation that stores KYC flags per identity token in a bitmask\\n */\\ncontract TokenBitMask {\\n    using BitMask for uint256;\\n\\n    /**\\n     * @dev Emitted when token BitMask associated with `tokenId` updated to `bitmask`.\\n     */\\n    event BitMaskUpdated(uint256 tokenId, uint256 bitmask);\\n\\n    /**\\n     * @dev Emitted when Identity.com Admin updated FlagsStorage contract address from `previousFlagsStorage` to `flagsStorage`.\\n     */\\n    event FlagsStorageUpdated(address indexed flagsStorage);\\n\\n    // Gateway Token system FlagsStorage contract address\\n    IFlagsStorage public flagsStorage;\\n\\n    // Mapping for gateway token id to bitmask\\n    mapping(uint256 => uint256) private bitmasks;\\n\\n    /**\\n     * @dev Internal funciton to set FlagsStorage contract address\\n     * @param _flagsStorage FlagsStorage contract address\\n     */\\n    function _setFlagsStorage(address _flagsStorage) internal {\\n        flagsStorage = IFlagsStorage(_flagsStorage);\\n\\n        emit FlagsStorageUpdated(_flagsStorage);\\n    }\\n\\n    /**\\n     * @dev Internal function to get gateway token bitmask\\n     */\\n    function _getBitMask(uint256 tokenId) internal view returns (uint256) {\\n        return bitmasks[tokenId];\\n    }\\n\\n    /**\\n     * @dev Internal function to set full bitmask for gateway token\\n     * @notice This function rewrites previous bitmask, use _addBitmask if you need to add flags to existing bitmask\\n     */\\n    function _setBitMask(uint256 tokenId, uint256 mask) internal {\\n        bitmasks[tokenId] = mask;\\n\\n        emit BitMaskUpdated(tokenId, mask);\\n    }\\n\\n    /**\\n     * @dev Internal function to add `mask` to existing bitmask for gateway token with `tokenId`\\n     */\\n    function _addBitMask(uint256 tokenId, uint256 mask) internal {\\n        uint256 oldMask = bitmasks[tokenId];\\n        uint256 newMask = oldMask.or(mask);\\n\\n        bitmasks[tokenId] = newMask;\\n\\n        emit BitMaskUpdated(tokenId, newMask);\\n    }\\n\\n    /**\\n     * @dev Internal function to add one bit at particular `index` for gateway token with `tokenId`\\n     */\\n    function _addBit(uint256 tokenId, uint8 index) internal {\\n        uint256 oldMask = bitmasks[tokenId];\\n        uint256 newMask = oldMask.setBit(index);\\n\\n        bitmasks[tokenId] = newMask;\\n\\n        emit BitMaskUpdated(tokenId, newMask);\\n    }\\n\\n    /**\\n     * @dev Internal function to remove bits in `removingMask` for gateway token with `tokenId`\\n     */\\n    function _removeBits(uint256 tokenId, uint8 removingMask) internal {\\n        uint256 oldMask = bitmasks[tokenId];\\n        uint256 newMask = oldMask.negate();\\n\\n        newMask = newMask.or(removingMask);\\n        newMask = newMask.negate();\\n        bitmasks[tokenId] = newMask;\\n\\n        emit BitMaskUpdated(tokenId, newMask);\\n    }\\n\\n    /**\\n     * @dev Internal function to clear one bit in particular `index` for gateway token with `tokenId`\\n     */\\n    function _clearBit(uint256 tokenId, uint8 index) internal {\\n        uint256 oldMask = bitmasks[tokenId];\\n        uint256 newMask = oldMask.clearBit(index);\\n\\n        bitmasks[tokenId] = newMask;\\n\\n        emit BitMaskUpdated(tokenId, newMask);\\n    }\\n\\n    /**\\n     * @dev Internal function to delete bitmask associated with `tokenId`\\n     */\\n    function _clearBitMask(uint256 tokenId) internal {\\n        delete bitmasks[tokenId];\\n        emit BitMaskUpdated(tokenId, 0);\\n    }\\n}\\n\",\"keccak256\":\"0x6ef9b1c4dbf08bf157058cb1f2925fdc24398d6d8af228970f103de36748eb9e\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721Expirable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../library/Charge.sol\\\";\\n\\ninterface IERC721Expirable {\\n    /**\\n    * @dev Emitted when expiration set to `tokenId`\\n    */\\n    event Expiration(uint256 indexed tokenId, uint256 timestamp);\\n\\n    /**\\n    * @dev Triggers to freeze gateway token\\n    * @param tokenId Gateway token id\\n    */\\n    function expiration(uint256 tokenId) external view returns (uint256);\\n\\n    /**\\n    * @dev Triggers to unfreeze gateway token\\n    * @param tokenId Gateway token id\\n    * @param tokenId Expiration timestamp\\n    * @param charge The charge details for token issuance (ignored here - handled if at all by the forwarding contract)\\n    */\\n    function setExpiration(uint256 tokenId, uint256 timestamp, Charge calldata charge) external;\\n}\",\"keccak256\":\"0xa8a8f3d8231a6ed0697fccdb353d3cc4f90ca278cdf0d889fbf137a552d7d232\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721Freezeble.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC721Freezeble {\\n    /**\\n    * @dev Emitted when token freezed by gatekeeper\\n    */\\n    event Freeze(uint256 indexed tokenId);\\n\\n    /**\\n    * @dev Emitted when token unfreezed by gatekeeper\\n    */\\n    event Unfreeze(uint256 indexed tokenId);\\n\\n    /**\\n    * @dev Triggers to freeze gateway token\\n    * @param tokenId Gateway token id\\n    */\\n    function freeze(uint256 tokenId) external;\\n\\n    /**\\n    * @dev Triggers to unfreeze gateway token\\n    * @param tokenId Gateway token id\\n    */\\n    function unfreeze(uint256 tokenId) external;\\n}\",\"keccak256\":\"0x2dfb4fa07d16024f1d8bc6ca95958ef3330573ebccc1ca3190e46ab711ca1378\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721Revokable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC721Revokable {\\n    /**\\n    * @dev Emitted when GatewayToken is revoked.\\n    */\\n    event Revoke(uint256 tokenId);\\n\\n    /**\\n    * @dev Triggers to revoke gateway token\\n    * @param tokenId Gateway token id\\n    */\\n    function revoke(uint256 tokenId) external;\\n}\",\"keccak256\":\"0xcf898af6a68750b8fa2aa83383ed853e9eda40cd3d544ccf9ca6ca062f870fc6\",\"license\":\"MIT\"},\"contracts/interfaces/IFlagsStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IFlagsStorage {\\n\\n    /**\\n    * @dev Emitted when DAO Controller is updated from `prevDAOController` to `daoController`.\\n    */\\n    event SuperAdminUpdated(\\n        address indexed prevSuperAdmin,\\n        address indexed superAdmin\\n    );\\n\\n    /**\\n    * @dev Emitted when new flag is added with `flag` short code and `index`.\\n    */\\n    event FlagAdded(bytes32 indexed flag, uint8 index);\\n\\n    /**\\n    * @dev Emitted when existing flag is removed from FlagsStorage by `flag` short code.\\n    */\\n    event FlagRemoved(bytes32 indexed flag);\\n\\n    /**\\n    * @dev Triggers to add new flag into gateway token system\\n    * @param _flag Flag short identifier\\n    * @param _index Flag index (limited to 255)\\n    * @notice Only executed by existing DAO Manager\\n    */\\n    function addFlag(bytes32 _flag, uint8 _index) external;\\n\\n    /**\\n    * @dev Triggers to add multiple flags into gateway token system\\n    * @param _flags Array of flag short identifiers\\n    * @param _indexes Array of flag indexes (limited to 255)\\n    * @notice Only executed by existing DAO Manager\\n    */\\n    function addFlags(bytes32[] memory _flags, uint8[] memory _indexes) external;\\n\\n    /**\\n    * @dev Triggers to get DAO Controller address\\n    */\\n    function superAdmin() external view returns (address);\\n\\n    /**\\n    * @dev Triggers to get flag index from flags mapping\\n    */\\n    function flagIndexes(bytes32) external view returns (uint8);\\n\\n    /**\\n    * @dev Triggers to check if a particular flag is supported\\n    * @param _flag Flag short identifier\\n    * @return Boolean for flag support\\n    */\\n    function isFlagSupported(bytes32 _flag) external view returns (bool);\\n\\n    /**\\n    * @dev Triggers to remove existing flag from gateway token system\\n    * @param _flag Flag short identifier\\n    * @notice Only executed by existing DAO Manager\\n    */\\n    function removeFlag(bytes32 _flag) external;\\n\\n    /**\\n    * @dev Triggers to remove multiple existing flags from gateway token system\\n    * @param _flags Array of flag short identifiers\\n    * @notice Only executed by existing DAO Manager\\n    */\\n    function removeFlags(bytes32[] memory _flags) external;\\n\\n    /**\\n    * @dev Triggers to get bitmask of all supported flags\\n    */\\n    function supportedFlagsMask() external view returns (uint256);\\n\\n    /**\\n    * @dev Triggers to transfer ownership of this contract to new DAO Controller, reverts on zero address and wallet addresses\\n    * @param _newSuperAdmin New DAO Controller contract address\\n    * @notice Only executed by existing DAO Manager\\n    */\\n    function updateSuperAdmin(address _newSuperAdmin) external;\\n}\",\"keccak256\":\"0x84a07e74d45c23cf73dc8374cc3c0f11c9001a690bd9ae29b093462a17dea652\",\"license\":\"MIT\"},\"contracts/interfaces/IGatewayToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../library/Charge.sol\\\";\\n\\ninterface IGatewayToken {\\n    /**\\n    * @dev Emitted when GatewayToken DAO Manager transferred to `newDAOManager` address.\\n    */\\n    event DAOManagerTransferred(address previousDAOManager, address newDAOManager, uint256 network);\\n\\n    /**\\n    * @dev Triggers to get all information relating to gateway `tokenId`\\n    * @param tokenId Gateway token id\\n    */\\n    function getToken(uint256 tokenId) \\n        external \\n        view  \\n        returns (\\n            address owner,\\n            uint8 state,\\n            string memory identity,\\n            uint256 expiration,\\n            uint256 bitmask\\n        );\\n\\n    /**\\n    * @dev Triggers to get gateway token state with specified `tokenId`\\n    * @param tokenId Gateway token id\\n    */\\n    function getTokenState(uint256 tokenId) external view returns (uint8 state);\\n\\n    /**\\n    * @dev Triggers to verify if address has a GATEKEEPER role. \\n    * @param gatekeeper Gatekeeper address\\n    * @param network GatekeeperNetwork id\\n    */\\n    function isGatekeeper(address gatekeeper, uint256 network) external returns (bool);\\n\\n    function createNetwork(uint256 network, string memory name, bool daoGoverned, address daoManager) external;\\n\\n    function renameNetwork(uint256 network, string memory name) external;\\n\\n    /**\\n    * @dev Triggers to add new network authority into the system. \\n    * @param authority Network Authority address\\n    * @param network GatekeeperNetwork id\\n    *\\n    * @notice Only triggered by Identity.com Admin\\n    */\\n    function addNetworkAuthority(address authority, uint256 network) external;\\n\\n    /**\\n    * @dev Triggers to remove existing network authority from gateway token. \\n    * @param authority Network Authority address\\n    * @param network GatekeeperNetwork id\\n    *\\n    * @notice Only triggered by Identity.com Admin\\n    */\\n    function removeNetworkAuthority(address authority, uint256 network) external;\\n\\n    /**\\n    * @dev Triggers to verify if authority has a NETWORK_AUTHORITY_ROLE role. \\n    * @param authority Network Authority address\\n    * @param network GatekeeperNetwork id\\n    */\\n    function isNetworkAuthority(address authority, uint256 network) external returns (bool);\\n\\n    /**\\n    * @dev Transfers Gateway Token DAO Manager access from daoManager to `newManager`\\n    * @param newManager Address to transfer DAO Manager role for.\\n    */\\n    function transferDAOManager(address previousManager, address newManager, uint256 network) external;\\n\\n    function mint(address to, uint256 network, uint256 expiration, uint256 mask, Charge calldata charge) external;\\n}\",\"keccak256\":\"0xc0cdd1c65d697df773b90af02bc9eeaac07d83a24e371f384f0a6c55fb50f60e\",\"license\":\"MIT\"},\"contracts/interfaces/IParameterizedAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IParameterizedAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, uint256 domain, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    event SuperAdminAdded(address indexed account);\\n\\n    event SuperAdminRemoved(address indexed account);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, uint256 domain, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role,  uint256 domain, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, uint256 domain, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role, uint256 domain) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, uint256 domain, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, uint256 domain, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, uint256 domain, address account) external;\\n\\n    function isSuperAdmin(address account) external view returns (bool);\\n    function setSuperAdmin(address account) external;\\n    function revokeSuperAdmin(address account) external;\\n}\\n\",\"keccak256\":\"0x343013e12c7ee1258aaacfe6915dcf799dd13c085fbe98eeb8fd66c54b5277d5\",\"license\":\"MIT\"},\"contracts/library/BitMask.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary BitMask {\\n\\n    uint constant internal ONE = uint256(1);\\n    uint constant internal ONES = ~uint256(0);\\n\\n    /**\\n    * @dev Internal function to set 1 bit in specific `index`\\n    * @return Updated bitmask with modified bit at `index`\\n    */\\n    function setBit(uint256 self, uint8 index) internal pure returns (uint256) {\\n        return self | ONE << index;\\n    }\\n\\n    /**\\n    * @dev Internal function to clear bit to 0 in specific `index`\\n    * @return Updated bitmask with modified bit at `index`\\n    */\\n    function clearBit(uint256 self, uint8 index) internal pure returns (uint256) {\\n        return self & ~(ONE << index);\\n    }\\n\\n    /**\\n    * @dev Internal function to check bit at specific `index`\\n    * @return Returns TRUE if bit is '1', FALSE otherwise\\n    */\\n    function checkBit(uint256 self, uint8 index) internal pure returns (bool) {\\n        return (self & (uint256(1) << index)) > 0;\\n    }\\n\\n    /**\\n    * @dev Internal function to apply NOT operator for a bit in specific `index`\\n    * If the original bit is '1' sets bit to '0'\\n    * If the original bit is '0' sets bit to '1'\\n    * @return Updated bitmask with modified bit at `index`\\n    */\\n    function toggleBit(uint256 self, uint8 index) internal pure returns (uint256) {\\n        return self ^ ONE << index;\\n    }\\n\\n    /**\\n    * @dev AND operator between two bitmasks:\\n    * '0' AND '0' -> '0'\\n    * '0' AND '1' -> '0'\\n    * '1' AND '0' -> '0'\\n    * '1' AND '1' -> '1'\\n    */\\n    function and(uint256 self, uint256 mask) internal pure returns (uint256) {\\n        return self & mask;\\n    }\\n    \\n    /**\\n    * @dev OR operator between two bitmasks:\\n    * '0' OR '0' -> '0'\\n    * '0' OR '1' -> '1'\\n    * '1' OR '0' -> '1'\\n    * '1' OR '1' -> '1'\\n    */\\n    function or(uint256 self, uint256 mask) internal pure returns (uint256) {\\n        return self | mask;\\n    }\\n    \\n    /**\\n    * @dev XOR operator between two bitmasks:\\n    * '0' XOR '0' -> '0'\\n    * '0' XOR '1' -> '1'\\n    * '1' XOR '0' -> '1'\\n    * '1' XOR '1' -> '0'\\n    */\\n    function xor(uint256 self, uint256 mask) internal pure returns (uint256) {\\n        return self ^ mask;\\n    }\\n    \\n    /**\\n    * @dev NOT operator:\\n    * '0' NOT -> '1'\\n    * '1' NOT -> '0'\\n    */\\n    function negate(uint256 self) internal pure returns (uint256) {\\n        return self ^ ONES;\\n    }\\n\\n    /**\\n    * @dev NOT operator:\\n    * '0' NOT -> '1'\\n    * '1' NOT -> '0'\\n    */\\n    function not(uint256 self) internal pure returns (uint256) {\\n        return ~self;\\n    }\\n    \\n    /**\\n    * @dev Left shift of `self` bitmask by `index`:\\n    */\\n    function shiftLeft(uint256 self, uint8 index) internal pure returns (uint256) {\\n        return self << index;\\n    }\\n    \\n    /**\\n    * @dev Left shift of `self` bitmask by `index`:\\n    */\\n    function shiftRight(uint256 self, uint8 index) internal pure returns (uint256) {\\n        return self >> index;\\n    }\\n}\",\"keccak256\":\"0x5217012189ce0d093b5cce577d064b9ddb8e6c7163a3fb0f234bfe9cba3bb505\",\"license\":\"MIT\"},\"contracts/library/Charge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum ChargeType {\\n    NONE, // No charge\\n    ETH,  // Charge amount is in Eth (Wei)\\n    ERC20 // Charge amount is in an ERC20 token (token field) in minor denomination\\n}\\n\\n/**\\n * @dev The Charge struct represents details of a charge made to the gatekeeper on\\n * gateway token issuance or refresh.\\n */\\nstruct Charge {\\n    uint256 value;\\n    ChargeType chargeType;\\n    address token;\\n    address recipient;\\n}\",\"keccak256\":\"0x7260dfbcc4533f732fc21a23922685e5886ebcef71b9fa49d9e89c21b68a230a\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162005b0338038062005b03833981016040819052620000349162000322565b848460008360005b8151811015620000a75760016000808484815181106200006057620000606200044e565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055806200009e8162000464565b9150506200003c565b50508251620000be90600190602086019062000181565b508151620000d490600290602085019062000181565b506003805460ff90921660ff199092169190911790555050600e805460ff60a01b1916600160a01b1790556200010a8262000137565b50506001600160a01b03166000908152600b60205260409020805460ff1916600117905550620004cb9050565b600c80546001600160a01b0319166001600160a01b0383169081179091556040517f5e4a30f4224898dbac86adca855a5edd3b8341a3aeb2b6ff0f0b5a82c013b65a90600090a250565b8280546200018f906200048e565b90600052602060002090601f016020900481019282620001b35760008555620001fe565b82601f10620001ce57805160ff1916838001178555620001fe565b82800160010185558215620001fe579182015b82811115620001fe578251825591602001919060010190620001e1565b506200020c92915062000210565b5090565b5b808211156200020c576000815560010162000211565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171562000268576200026862000227565b604052919050565b600082601f8301126200028257600080fd5b81516001600160401b038111156200029e576200029e62000227565b6020620002b4601f8301601f191682016200023d565b8281528582848701011115620002c957600080fd5b60005b83811015620002e9578581018301518282018401528201620002cc565b83811115620002fb5760008385840101525b5095945050505050565b80516001600160a01b03811681146200031d57600080fd5b919050565b600080600080600060a086880312156200033b57600080fd5b85516001600160401b03808211156200035357600080fd5b6200036189838a0162000270565b96506020915081880151818111156200037957600080fd5b620003878a828b0162000270565b965050620003986040890162000305565b9450620003a86060890162000305565b9350608088015181811115620003bd57600080fd5b8801601f81018a13620003cf57600080fd5b805182811115620003e457620003e462000227565b8060051b9250620003f78484016200023d565b818152928201840192848101908c8511156200041257600080fd5b928501925b848410156200043b576200042b8462000305565b8252928501929085019062000417565b8096505050505050509295509295909350565b634e487b7160e01b600052603260045260246000fd5b60006000198214156200048757634e487b7160e01b600052601160045260246000fd5b5060010190565b600181811c90821680620004a357607f821691505b60208210811415620004c557634e487b7160e01b600052602260045260246000fd5b50919050565b61562880620004db6000396000f3fe6080604052600436106104475760003560e01c806382d66d5f11610234578063babb898d1161012e578063e345e0bc116100b6578063f62bce7d1161007a578063f62bce7d14610d97578063f77c479114610db7578063fc9ca98714610dd7578063ff17e23214610df7578063ff85a97514610e1757600080fd5b8063e345e0bc14610cc4578063e4b50cb814610ce4578063e8a3d48514610d15578063e985e9c514610d2a578063f45fd0f314610d7757600080fd5b8063d6fd3175116100fd578063d6fd317514610bef578063d7a78db814610c11578063df2a7fe114610c31578063df7f453b14610c6b578063e0ed6a3114610ca457600080fd5b8063babb898d14610b6f578063c2a366fb14610b8f578063c58dbbed14610baf578063c87b56dd14610bcf57600080fd5b80639c7525e6116101bc578063a578c09311610180578063a578c09314610acc578063a8fa8e0d14610afc578063b4bd857914610b1c578063b5d6163514610b3c578063b88d4fde14610b5c57600080fd5b80639c7525e614610a375780639cc7f70814610a57578063a1e0891114610a77578063a217fddf14610a97578063a22cb46514610aac57600080fd5b80638cb0a511116102035780638cb0a511146109ae5780638eb7a776146109c157806390eddd52146109e157806395d89b4114610a015780639605f12f14610a1657600080fd5b806382d66d5f1461092f578063840f71131461094f5780638423df791461096f57806385e3f0581461098e57600080fd5b806342842e0e116103455780635e79b726116102cd5780636f7caf41116102915780636f7caf411461088b57806370a08231146108ad57806370f08160146108cd5780637dbded28146108ed57806381e9ff191461090d57600080fd5b80635e79b726146107eb578063603d01401461080b5780636352211e1461082b5780636623fc461461084b5780636dba27291461086b57600080fd5b80634f6ccce7116103145780634f6ccce71461073257806351da912d14610752578063572b6c0514610772578063598c064a146107ab5780635c41d2fe146107cb57600080fd5b806342842e0e146106bf57806342966c68146106d2578063443ff4a1146106f25780634d93172d1461071257600080fd5b806320c5429b116103d3578063310ed7f011610397578063310ed7f01461062657806334e37b8a146106395780633568dd291461065957806336e45041146106795780633e7e86691461069957600080fd5b806320c5429b1461059357806323b872dd146105b3578063263f3e7e146105c65780632d33d27a146105e65780632f745c591461060657600080fd5b806309c3dd871161041a57806309c3dd87146104f05780630f485c02146105105780631442f52114610531578063157000521461055e57806318160ddd1461057e57600080fd5b806301ffc9a71461044c57806306fdde0314610481578063081812fc146104a3578063095ea7b3146104db575b600080fd5b34801561045857600080fd5b5061046c610467366004614ac6565b610e37565b60405190151581526020015b60405180910390f35b34801561048d57600080fd5b50610496610e98565b6040516104789190614b3b565b3480156104af57600080fd5b506104c36104be366004614b4e565b610f2a565b6040516001600160a01b039091168152602001610478565b6104ee6104e9366004614b7e565b610f7c565b005b3480156104fc57600080fd5b5061049661050b366004614b4e565b61101d565b61052361051e366004614ba8565b61111e565b604051908152602001610478565b34801561053d57600080fd5b5061055161054c366004614b7e565b611167565b6040516104789190614bdd565b34801561056a57600080fd5b506104ee610579366004614c21565b61121f565b34801561058a57600080fd5b50600654610523565b34801561059f57600080fd5b506104ee6105ae366004614b4e565b61129e565b6104ee6105c1366004614c3c565b61132e565b3480156105d257600080fd5b506105236105e1366004614b4e565b611366565b3480156105f257600080fd5b50600c546104c3906001600160a01b031681565b34801561061257600080fd5b50610523610621366004614b7e565b6113ae565b6104ee610634366004614c68565b61144f565b34801561064557600080fd5b506104ee610654366004614c21565b61146c565b34801561066557600080fd5b506104ee610674366004614b7e565b61149f565b34801561068557600080fd5b506104ee610694366004614c94565b6114bc565b3480156106a557600080fd5b5060035460ff165b60405160ff9091168152602001610478565b6104ee6106cd366004614c3c565b611547565b3480156106de57600080fd5b506104ee6106ed366004614b4e565b611562565b3480156106fe57600080fd5b506104ee61070d366004614b4e565b6115a2565b34801561071e57600080fd5b506104ee61072d366004614c21565b6115e2565b34801561073e57600080fd5b5061052361074d366004614b4e565b61162e565b34801561075e57600080fd5b506104ee61076d366004614cc9565b6116bf565b34801561077e57600080fd5b5061046c61078d366004614c21565b6001600160a01b031660009081526020819052604090205460ff1690565b3480156107b757600080fd5b506104ee6107c6366004614cc9565b611700565b3480156107d757600080fd5b506104ee6107e6366004614c21565b611741565b3480156107f757600080fd5b506104ee610806366004614d03565b611790565b34801561081757600080fd5b506104ee610826366004614d30565b6117d1565b34801561083757600080fd5b506104c3610846366004614b4e565b611812565b34801561085757600080fd5b506104ee610866366004614b4e565b6118ae565b34801561087757600080fd5b5061046c610886366004614b7e565b6118ee565b34801561089757600080fd5b506105236000805160206155d383398151915281565b3480156108b957600080fd5b506105236108c8366004614c21565b611909565b3480156108d957600080fd5b506104ee6108e8366004614b7e565b611991565b3480156108f957600080fd5b506104ee610908366004614e41565b6119aa565b34801561091957600080fd5b5061052360008051602061559383398151915281565b34801561093b57600080fd5b506104ee61094a366004614b7e565b611b8e565b34801561095b57600080fd5b506009546104c3906001600160a01b031681565b34801561097b57600080fd5b50600e54600160a01b900460ff1661046c565b34801561099a57600080fd5b506104966109a9366004614b4e565b611ba7565b6104ee6109bc366004614ba8565b611bb2565b3480156109cd57600080fd5b506104ee6109dc366004614c94565b611c46565b3480156109ed57600080fd5b506104ee6109fc366004614b7e565b611c80565b348015610a0d57600080fd5b50610496611c99565b348015610a2257600080fd5b50600e5461046c90600160a01b900460ff1681565b348015610a4357600080fd5b506104ee610a52366004614eab565b611ca8565b348015610a6357600080fd5b50610523610a72366004614b4e565b611d81565b348015610a8357600080fd5b50610523610a92366004614b4e565b611dc9565b348015610aa357600080fd5b50610523600081565b348015610ab857600080fd5b506104ee610ac7366004614ef2565b611e33565b348015610ad857600080fd5b5061046c610ae7366004614b4e565b600f6020526000908152604090205460ff1681565b348015610b0857600080fd5b506104ee610b17366004614c3c565b611e45565b348015610b2857600080fd5b50610523610b37366004614b4e565b61207b565b348015610b4857600080fd5b506104ee610b57366004614c94565b612091565b6104ee610b6a366004614f1e565b6120c4565b348015610b7b57600080fd5b5061046c610b8a366004614c94565b6120fd565b348015610b9b57600080fd5b5061046c610baa366004614b7e565b61212e565b348015610bbb57600080fd5b506104ee610bca366004614c21565b612149565b348015610bdb57600080fd5b50610496610bea366004614b4e565b6121c5565b348015610bfb57600080fd5b506105236000805160206155b383398151915281565b348015610c1d57600080fd5b506104ee610c2c366004614b4e565b612264565b348015610c3d57600080fd5b50610523610c4c366004614cc9565b6000908152600a60209081526040808320938352929052206001015490565b348015610c7757600080fd5b5061046c610c86366004614c21565b6001600160a01b03166000908152600b602052604090205460ff1690565b348015610cb057600080fd5b506104ee610cbf366004614f9a565b6122a4565b348015610cd057600080fd5b50610523610cdf366004614fec565b61231b565b348015610cf057600080fd5b50610d04610cff366004614b4e565b61234f565b604051610478959493929190615018565b348015610d2157600080fd5b50610496612452565b348015610d3657600080fd5b5061046c610d45366004615059565b6001600160a01b0391821660009081526008602090815260408083209390941682526002909201909152205460ff1690565b348015610d8357600080fd5b506106ad610d92366004614b4e565b61255b565b348015610da357600080fd5b506104ee610db2366004614d30565b61257e565b348015610dc357600080fd5b50600e546104c3906001600160a01b031681565b348015610de357600080fd5b506104ee610df2366004614d30565b6125bf565b348015610e0357600080fd5b5061046c610e12366004614b7e565b612600565b348015610e2357600080fd5b5061046c610e32366004614b4e565b612692565b60006001600160e01b03198216630354d60560e61b1480610e6857506001600160e01b031982166380ac58cd60e01b145b80610e8357506001600160e01b03198216635b5e139f60e01b145b80610e925750610e928261269f565b92915050565b606060018054610ea790615083565b80601f0160208091040260200160405190810160405280929190818152602001828054610ed390615083565b8015610f205780601f10610ef557610100808354040283529160200191610f20565b820191906000526020600020905b815481529060010190602001808311610f0357829003601f168201915b5050505050905090565b6000610f35826126c4565b600082815260076020526040902054600680549091908110610f5957610f596150b8565b60009182526020909120600460069092020101546001600160a01b031692915050565b6000610f8782611812565b9050806001600160a01b0316836001600160a01b03161415610fc45760405162461bcd60e51b8152600401610fbb906150ce565b60405180910390fd5b806001600160a01b0316610fd6612715565b6001600160a01b03161480610ff25750610ff281610d45612715565b61100e5760405162461bcd60e51b8152600401610fbb90615110565b6110188383612724565b505050565b6060600061103660408051602081019091526000815290565b6009549091506001600160a01b03166110965760008151116110675760405180602001604052806000815250611117565b80611071846127bb565b60405160200161108292919061516d565b604051602081830303815290604052611117565b600954604051633601bfc560e11b8152600481018590526001600160a01b0390911690636c037f8a906024015b60006040518083038186803b1580156110db57600080fd5b505afa1580156110ef573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261111791908101906151ad565b9392505050565b600061113261112b612715565b8584612858565b600061113d856128e8565b9050611154848261114d88611366565b60006128f2565b61115f858285612a14565b949350505050565b60606000806111768585612cbf565b9150915060008167ffffffffffffffff81111561119557611195614d66565b6040519080825280602002602001820160405280156111be578160200160208202803683370190505b50905060005b82811015611215578381815181106111de576111de6150b8565b60200260200101518282815181106111f8576111f86150b8565b60209081029190910101528061120d8161523a565b9150506111c4565b5095945050505050565b61122a610c86612715565b6112465760405162461bcd60e51b8152600401610fbb90615255565b6040516001600160a01b038216907f286f82d2b1e37b5e9f33e455d014b4a5f6c29388e6e41e1281d4c83e04f4265590600090a26001600160a01b03166000908152600b60205260409020805460ff19166001179055565b6112c16000805160206155b38339815191526112b983611366565b610b8a612715565b6112dd5760405162461bcd60e51b8152600401610fbb9061527e565b600081815260116020908152604091829020805460ff1916600217905590518281527fdb43aa42235c8d63908794a952603e8d43a549383d13123c3d893a3fc2e6249591015b60405180910390a150565b61133f611339612715565b82612d8b565b61135b5760405162461bcd60e51b8152600401610fbb906152c0565b611018838383612f01565b6000611371826126c4565b600082815260076020526040902054600680549091908110611395576113956150b8565b9060005260206000209060060201600101549050919050565b60006113b983611909565b82106114125760405162461bcd60e51b815260206004820152602260248201527f455243333532353a206f776e657220696e646578206f7574206f6620626f756e604482015261647360f01b6064820152608401610fbb565b6001600160a01b038316600090815260086020526040902080548390811061143c5761143c6150b8565b9060005260206000200154905092915050565b61146161145a612715565b8483612858565b611018838383612a14565b611477610c86612715565b6114935760405162461bcd60e51b8152600401610fbb90615255565b61149c81613062565b50565b6114b86000805160206155b38339815191528284611c46565b5050565b6114c4612715565b6001600160a01b0316816001600160a01b03161461153c5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610fbb565b6110188383836130ac565b611018838383604051806020016040528060008152506120c4565b61157d6000805160206155b38339815191526112b983611366565b6115995760405162461bcd60e51b8152600401610fbb9061527e565b61149c81613148565b6115bd6000805160206155b38339815191526112b983611366565b6115d95760405162461bcd60e51b8152600401610fbb9061527e565b61149c81613269565b6115ed610c86612715565b6116095760405162461bcd60e51b8152600401610fbb90615255565b61149c816001600160a01b03166000908152602081905260409020805460ff19169055565b600061163960065490565b82106116935760405162461bcd60e51b815260206004820152602360248201527f455243333532353a20676c6f62616c20696e646578206f7574206f6620626f756044820152626e647360e81b6064820152608401610fbb565b600682815481106116a6576116a66150b8565b9060005260206000209060060201600001549050919050565b6116da6000805160206155b38339815191526112b984611366565b6116f65760405162461bcd60e51b8152600401610fbb9061527e565b6114b882826132b3565b61171b6000805160206155b38339815191526112b984611366565b6117375760405162461bcd60e51b8152600401610fbb9061527e565b6114b88282613302565b61174c610c86612715565b6117685760405162461bcd60e51b8152600401610fbb90615255565b61149c816001600160a01b03166000908152602081905260409020805460ff19166001179055565b6117ab6000805160206155b38339815191526112b985611366565b6117c75760405162461bcd60e51b8152600401610fbb9061527e565b611018838361336a565b6117ec6000805160206155b38339815191526112b984611366565b6118085760405162461bcd60e51b8152600401610fbb9061527e565b6114b8828261341e565b600061181d826126c4565b600082815260076020526040902054600680549091908110611841576118416150b8565b60009182526020909120600360069092020101546001600160a01b03169050806118a95760405162461bcd60e51b8152602060048201526019602482015278115490cccd4c8d4e881a5b9d985b1a59081d1bdad95b881251603a1b6044820152606401610fbb565b919050565b6118c96000805160206155b38339815191526112b983611366565b6118e55760405162461bcd60e51b8152600401610fbb9061527e565b61149c8161343d565b60006111176000805160206155b383398151915283856120fd565b60006001600160a01b0382166119755760405162461bcd60e51b815260206004820152602b60248201527f455243333532353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b6064820152608401610fbb565b506001600160a01b031660009081526008602052604090205490565b6114b86000805160206155b38339815191528284612091565b600084815260136020526040902080546119c390615083565b159050611a0b5760405162461bcd60e51b81526020600482015260166024820152754e4554574f524b20414c52454144592045584953545360501b6044820152606401610fbb565b60008481526013602090815260409091208451611a2a928601906149a8565b50611a4b6000805160206155d383398151915285611a46612715565b61352e565b8115611b3a576000848152600f60205260409020805460ff19168315151790556001600160a01b038116611ab55760405162461bcd60e51b8152602060048201526011602482015270494e434f5252454354204144445245535360781b6044820152606401610fbb565b611ace600080516020615593833981519152858361352e565b611ae76000805160206155d3833981519152858361352e565b611b0e6000805160206155d383398151915285600080516020615593833981519152613539565b611b356000805160206155b383398151915285600080516020615593833981519152613539565b611b88565b611b616000805160206155d3833981519152856000805160206155d3833981519152613539565b611b886000805160206155b3833981519152856000805160206155d3833981519152613539565b50505050565b6114b86000805160206155d38339815191528284611c46565b6060610e92826121c5565b6000611bbd84611812565b9050806001600160a01b0316836001600160a01b03161415611bf15760405162461bcd60e51b8152600401610fbb906150ce565b806001600160a01b0316611c03612715565b6001600160a01b03161480611c1f5750611c1f81610d45612715565b611c3b5760405162461bcd60e51b8152600401610fbb90615110565b611b8884848461359a565b6000828152600a6020908152604080832086845290915290206001015482611c6e82826136d2565b611c798585856130ac565b5050505050565b6114b86000805160206155d38339815191528284612091565b606060028054610ea790615083565b60008281526013602052604090208054611cc190615083565b15159050611d0a5760405162461bcd60e51b815260206004820152601660248201527513915515d3d492c81113d154c81393d50811561254d560521b6044820152606401610fbb565b611d256000805160206155d383398151915283610b8a612715565b611d625760405162461bcd60e51b815260206004820152600e60248201526d1393d5081055551213d49256915160921b6044820152606401610fbb565b60008281526013602090815260409091208251611018928401906149a8565b6000611d8c826126c4565b600082815260076020526040902054600680549091908110611db057611db06150b8565b9060005260206000209060060201600201549050919050565b6000611dd4826136e4565b611e205760405162461bcd60e51b815260206004820152601d60248201527f544f4b454e20444f45534e2754204558495354204f522046524f5a454e0000006044820152606401610fbb565b5060009081526012602052604090205490565b6114b8611e3e612715565b8383613730565b6000818152600f602052604090205460ff16611e965760405162461bcd60e51b815260206004820152601060248201526f1393d508111053c811d3d5915493915160821b6044820152606401610fbb565b611eaf60008051602061559383398151915282856120fd565b611ef35760405162461bcd60e51b815260206004820152601560248201527424a721a7a92922a1aa1027a6221026a0a720a3a2a960591b6044820152606401610fbb565b611f0e60008051602061559383398151915282610b8a612715565b611f505760405162461bcd60e51b815260206004820152601360248201527226aaa9aa102122902220a79026a0a720a3a2a960691b6044820152606401610fbb565b6001600160a01b038216611f955760405162461bcd60e51b815260206004820152600c60248201526b5a45524f204144445245535360a01b6044820152606401610fbb565b611fae6000805160206155938339815191528284612091565b611fc76000805160206155d38339815191528284612091565b611fe06000805160206155b38339815191528284612091565b611ff96000805160206155b38339815191528285611c46565b6120126000805160206155d38339815191528285611c46565b61202b6000805160206155938339815191528285611c46565b604080516001600160a01b038086168252841660208201529081018290527f744258a28673e8738e2812c0ab8e8dbd70352f8871b1febac0dd753d96d79f589060600160405180910390a1505050565b6000818152600d60205260408120548190611117565b6000828152600a60209081526040808320868452909152902060010154826120b982826136d2565b611c798585856137fb565b6120d56120cf612715565b83612d8b565b6120f15760405162461bcd60e51b8152600401610fbb906152c0565b611b888484848461388c565b6000918252600a602090815260408084209484529381528383206001600160a01b0392909216835252205460ff1690565b60006111176000805160206155d383398151915283856120fd565b612154610c86612715565b6121705760405162461bcd60e51b8152600401610fbb90615255565b6040516001600160a01b038216907ffb445f6ec07647d2bb7af72821e6b8b7303ec375e934d4a338d38ed5846c2d5690600090a26001600160a01b03166000908152600b60205260409020805460ff19169055565b60606121d0826126c4565b60006121e760408051602081019091526000815290565b6009549091506001600160a01b03166122335760008151116122185760405180602001604052806000815250611117565b80612222846127bb565b604051602001611082929190615312565b6009546040516344a5a61760e11b8152600481018590526001600160a01b039091169063894b4c2e906024016110c3565b61227f6000805160206155b38339815191526112b983611366565b61229b5760405162461bcd60e51b8152600401610fbb9061527e565b61149c816138ff565b6122bf6000805160206155b383398151915285610b8a612715565b6122db5760405162461bcd60e51b8152600401610fbb9061527e565b60006122e9868660016139a4565b905083156123035760008181526012602052604090208490555b82156123135761231381846132b3565b505050505050565b6000612326836126c4565b5060009182526005602090815260408084206001600160a01b0393909316845291905290205490565b600080606060008061236086611812565b60008781526011602052604090205490955060ff166002811115612386576123866152aa565b60008781526010602052604090208054919550906123a390615083565b80601f01602080910402602001604051908101604052809291908181526020018280546123cf90615083565b801561241c5780601f106123f15761010080835404028352916020019161241c565b820191906000526020600020905b8154815290600101906020018083116123ff57829003601f168201915b505050600089815260126020908152604080832054600d909252909120549396509450612447915050565b905091939590929450565b6060600061246b60408051602081019091526000815290565b6009549091506001600160a01b03166124cb57600081511161249c5760405180602001604052806000815250612555565b806124a6306139bd565b6040516020016124b7929190615341565b604051602081830303815290604052612555565b600960009054906101000a90046001600160a01b03166001600160a01b031663725fa09c6040518163ffffffff1660e01b815260040160006040518083038186803b15801561251957600080fd5b505afa15801561252d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261255591908101906151ad565b91505090565b60008181526011602052604081205460ff166002811115610e9257610e926152aa565b6125996000805160206155b38339815191526112b984611366565b6125b55760405162461bcd60e51b8152600401610fbb9061527e565b6114b882826139d3565b6125da6000805160206155b38339815191526112b984611366565b6125f65760405162461bcd60e51b8152600401610fbb9061527e565b6114b882826139f9565b600080600061260f8585612cbf565b9150915060005b8181101561268657828181518110612630576126306150b8565b602002602001015160001461267457612663838281518110612654576126546150b8565b60200260200101516000613a17565b156126745760019350505050610e92565b8061267e8161523a565b915050612616565b50600095945050505050565b6000610e92826000613a17565b60006001600160e01b031982166333cb74f560e11b1480610e925750610e9282613abb565b6126cd816136e4565b61149c5760405162461bcd60e51b8152602060048201526019602482015278115490cccd4c8d4e881a5b9d985b1a59081d1bdad95b881251603a1b6044820152606401610fbb565b600061271f613b5d565b905090565b600081815260076020526040902054600680548492908110612748576127486150b8565b6000918252602090912060069091020160040180546001600160a01b0319166001600160a01b039283161790558190831661278282611812565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b606060006127c883613b87565b600101905060008167ffffffffffffffff8111156127e8576127e8614d66565b6040519080825280601f01601f191660200182016040528015612812576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461284b57612850565b61281c565b509392505050565b6000612864838561231b565b90506128708484612d8b565b15801561287f57506000198114155b15611b8857818110156128d45760405162461bcd60e51b815260206004820152601f60248201527f455243333532353a20696e73756666696369656e7420616c6c6f77616e6365006044820152606401610fbb565b611b8883856128e38585615385565b61359a565b6000610e92613c5f565b6001600160a01b0384166129525760405162461bcd60e51b815260206004820152602160248201527f455243333532353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610fbb565b826129a95760405162461bcd60e51b815260206004820152602160248201527f455243333532353a2063616e6e6f74206d696e74207a65726f20746f6b656e496044820152601960fa1b6064820152608401610fbb565b6129b2836136e4565b156129ff5760405162461bcd60e51b815260206004820152601d60248201527f455243333532353a20746f6b656e20616c7265616479206d696e7465640000006044820152606401610fbb565b612a0a848484613c76565b611b358382613d3c565b612a1d836136e4565b612a795760405162461bcd60e51b815260206004820152602760248201527f455243333532353a207472616e736665722066726f6d20696e76616c696420746044820152661bdad95b88125160ca1b6064820152608401610fbb565b612a82826136e4565b612adc5760405162461bcd60e51b815260206004820152602560248201527f455243333532353a207472616e7366657220746f20696e76616c696420746f6b604482015264195b88125160da1b6064820152608401610fbb565b600083815260076020526040812054600680549091908110612b0057612b006150b8565b9060005260206000209060060201905060006006600760008681526020019081526020016000205481548110612b3857612b386150b8565b906000526020600020906006020190508282600201541015612baf5760405162461bcd60e51b815260206004820152602a60248201527f455243333532353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b6064820152608401610fbb565b8060010154826001015414612c1d5760405162461bcd60e51b815260206004820152602e60248201527f455243333532353a207472616e7366657220746f20746f6b656e20776974682060448201526d191a5999995c995b9d081cdb1bdd60921b6064820152608401610fbb565b82826002016000828254612c319190615385565b9250508190555082816002016000828254612c4c919061539c565b9091555050604051838152849086907f0b2aac84f3ec956911fd78eae5311062972ff949f38412e8da39069d9f068cc69060200160405180910390a3612ca385858560405180602001604052806000815250613dc1565b611c795760405162461bcd60e51b8152600401610fbb906153b4565b6060600080612ccd85611909565b905060008167ffffffffffffffff811115612cea57612cea614d66565b604051908082528060200260200182016040528015612d13578160200160208202803683370190505b5090506000805b83811015612d7e576000612d2e89836113ae565b905087612d3a82611366565b1415612d6b57808484612d4c8161523a565b955081518110612d5e57612d5e6150b8565b6020026020010181815250505b5080612d768161523a565b915050612d1a565b5090969095509350505050565b600e54600090600160a01b900460ff1615612ddf5760405162461bcd60e51b81526020600482015260146024820152731514905394d1915494c8149154d5149250d5115160621b6044820152606401610fbb565b612de8826136e4565b612e495760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610fbb565b6000612e5483611812565b90506000612e6184611366565b9050816001600160a01b0316856001600160a01b03161415612e8857600192505050610e92565b846001600160a01b0316612e9b85610f2a565b6001600160a01b03161480612ed957506001600160a01b038083166000908152600860209081526040808320938916835260029093019052205460ff165b80612ef85750612ef86000805160206155b383398151915282876120fd565b92505050610e92565b826001600160a01b0316612f1482611812565b6001600160a01b031614612f765760405162461bcd60e51b8152602060048201526024808201527f455243333532353a207472616e736665722066726f6d20696e76616c6964206f6044820152633bb732b960e11b6064820152608401610fbb565b6001600160a01b038216612fda5760405162461bcd60e51b815260206004820152602560248201527f455243333532353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608401610fbb565b6000612fe582611366565b90506000612ff283611d81565b9050612fff600084612724565b61300883613f6a565b6130128584614006565b61301c8484614127565b82846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611c79565b600c80546001600160a01b0319166001600160a01b0383169081179091556040517f5e4a30f4224898dbac86adca855a5edd3b8341a3aeb2b6ff0f0b5a82c013b65a90600090a250565b6130b78383836120fd565b15611018576000828152600a6020908152604080832086845282528083206001600160a01b03851684529091529020805460ff191690556130f6612715565b6001600160a01b0316816001600160a01b0316847f6f9148fcdc32766ca802c14716295d56eab7ed848d0dba113966f40087c883908560405161313b91815260200190565b60405180910390a4505050565b613151816126c4565b600081815260076020526040812054600680549091908110613175576131756150b8565b60009182526020909120600691909102016003810154600182015460028301549293506001600160a01b03909116916131ad85613f6a565b6131b78386614006565b6131c0856141b0565b6000857f0b2aac84f3ec956911fd78eae5311062972ff949f38412e8da39069d9f068cc6836040516131f491815260200190565b60405180910390a3600082867fe4f48c240d3b994948aa54f3e2f5fca59263dfe1d52b6e4cf39a5d249b5ccb6560405160405180910390a460405185906000906001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a4611c79565b6000818152600d6020526040808220829055517f5e07998cef9cea674942c66f0ea7b0bce89ab9473ce240cc93d616c3491f8aeb9161132391849190918252602082015260400190565b6000828152600d602090815260409182902083905581518481529081018390527f5e07998cef9cea674942c66f0ea7b0bce89ab9473ce240cc93d616c3491f8aeb910160405180910390a15050565b6000828152600d6020526040812054908282175b6000858152600d602090815260409182902083905581518781529081018390529192507f5e07998cef9cea674942c66f0ea7b0bce89ab9473ce240cc93d616c3491f8aeb910160405180910390a150505050565b613375826001613a17565b6133cd5760405162461bcd60e51b815260206004820152602360248201527f544f4b454e20444f4553204e4f54204558495354204f5220495320494e41435460448201526249564560e81b6064820152608401610fbb565b600082815260126020526040908190208290555182907f1ebc57da8b3ebab98506502fbb73232ea29fbe86e4963a5a8c004810ad11190d906134129084815260200190565b60405180910390a25050565b6000828152600d602052604081205490600160ff84161b198216613316565b613446816136e4565b6134895760405162461bcd60e51b81526020600482015260146024820152731513d2d153881113d154c81393d50811561254d560621b6044820152606401610fbb565b600160008281526011602052604090205460ff1660028111156134ae576134ae6152aa565b146134ee5760405162461bcd60e51b815260206004820152601060248201526f2a27a5a2a7102727aa10232927ad22a760811b6044820152606401610fbb565b600081815260116020526040808220805460ff191690555182917fe2babfd5e77285a3c3dbc4b25592cbe4a7a26e97a7ac63067a22ebdaa9b82add91a250565b6110188383836137fb565b6000828152600a602090815260408083208684528252918290206001018054908490558251858152925190928492849288927f15f4a36186b2284157fe71215a07487f6c8bdc1203b3307c3e1fd9693011d3d392908290030190a450505050565b6001600160a01b0382166136035760405162461bcd60e51b815260206004820152602a60248201527f455243333532353a20617070726f76652076616c756520746f20746865207a65604482015269726f206164647265737360b01b6064820152608401610fbb565b61360d82846143be565b61367357600083815260076020526040902054600680549091908110613635576136356150b8565b60009182526020808320600692909202909101600501805460018101825590835291200180546001600160a01b0319166001600160a01b0384161790555b60008381526005602090815260408083206001600160a01b038616808552908352928190208490555183815285917f621b050de0ad08b51d19b48b3e6df75348c4de6bdd93e81b252ca62e28265b1b91015b60405180910390a3505050565b6114b882826136df612715565b614492565b60065460009015801590610e925750600082815260076020526040902054600680548492908110613717576137176150b8565b9060005260206000209060060201600001541492915050565b816001600160a01b0316836001600160a01b031614156137925760405162461bcd60e51b815260206004820152601a60248201527f455243333532353a20617070726f766520746f2063616c6c65720000000000006044820152606401610fbb565b6001600160a01b0383811660008181526008602090815260408083209487168084526002909501825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3191016136c5565b6138068383836120fd565b611018576000828152600a6020908152604080832086845282528083206001600160a01b03851684529091529020805460ff19166001179055613847612715565b6001600160a01b0316816001600160a01b0316847f4dc88bd74ca601684356789d5b3dbc9cd44275b2544e8d35041203703b7682328560405161313b91815260200190565b613897848484612f01565b6138a3848484846144ee565b611b885760405162461bcd60e51b815260206004820152602760248201527f455243333532353a207472616e7366657220746f206e6f6e204552433732315260448201526632b1b2b4bb32b960c91b6064820152608401610fbb565b61390a816001613a17565b6139615760405162461bcd60e51b815260206004820152602260248201527f544f4b454e20444f45534e275420455849535453204f52204e4f542041435449604482015261564560f01b6064820152608401610fbb565b600081815260116020526040808220805460ff191660011790555182917f779fbee689bbd6f006ecb329206d35c7db7380f9837a8826fb8dc5cfcd3d33dd91a250565b6000806139af613c5f565b905061115f858286866128f2565b6060610e926001600160a01b03831660146146bd565b6000828152600d6020526040902054600019811860ff8316811790506000198118613316565b6000828152600d602052604081205490600160ff84161b8217613316565b60008281526011602052604081205460ff1681816002811115613a3c57613a3c6152aa565b14613a4b576000915050610e92565b6000613a5685611812565b60008681526012602052604090205490915015801590613a74575083155b15613aa7576001600160a01b03811615801590612ef8575060008581526012602052604090205442111592505050610e92565b6001600160a01b031615159150610e929050565b60006001600160e01b031982166301ffc9a760e01b1480613aec57506001600160e01b03198216630354d60560e61b145b80613b0757506001600160e01b031982166380ac58cd60e01b145b80613b2257506001600160e01b031982166370b0048160e11b145b80613b3d57506001600160e01b0319821663780e9d6360e01b145b80610e9257506001600160e01b03198216635b5e139f60e01b1492915050565b3360009081526020819052604081205460ff1615613b82575060131936013560601c90565b503390565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310613bc65772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310613bf2576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310613c1057662386f26fc10000830492506010015b6305f5e1008310613c28576305f5e100830492506008015b6127108310613c3c57612710830492506004015b60648310613c4e576064830492506002015b600a8310610e925760010192915050565b6000613c6f600480546001019055565b5060045490565b6040805160c081018252838152602080820184905260008284018190526001600160a01b038716606084015260808301819052835181815291820190935260a08201529050613cc481614859565b613cce8484614127565b60405183906001600160a01b038616906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4816000847fe4f48c240d3b994948aa54f3e2f5fca59263dfe1d52b6e4cf39a5d249b5ccb6560405160405180910390a450505050565b600082815260076020526040902054600680548392908110613d6057613d606150b8565b90600052602060002090600602016002016000828254613d80919061539c565b909155505060405181815282906000907f0b2aac84f3ec956911fd78eae5311062972ff949f38412e8da39069d9f068cc69060200160405180910390a35050565b600080613dcd85611812565b90506001600160a01b0381163b15158015613e6057506040516301ffc9a760e01b8152629ce20b60e01b60048201526001600160a01b038216906301ffc9a79060240160206040518083038186803b158015613e2857600080fd5b505afa158015613e3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e6091906153fc565b15613f5e57806001600160a01b0316629ce20b613e7b612715565b888888886040518663ffffffff1660e01b8152600401613e9f959493929190615419565b602060405180830381600087803b158015613eb957600080fd5b505af1925050508015613ee9575060408051601f3d908101601f19168201909252613ee691810190615457565b60015b613f43573d808015613f17576040519150601f19603f3d011682016040523d82523d6000602084013e613f1c565b606091505b508051613f3b5760405162461bcd60e51b8152600401610fbb906153b4565b805181602001fd5b6001600160e01b031916629ce20b60e01b14915061115f9050565b50600195945050505050565b600081815260076020526040812054600680549091908110613f8e57613f8e6150b8565b600091825260208220600560069092020190810154909250905b81811015611b88576000836005018281548110613fc757613fc76150b8565b60009182526020808320909101548783526005825260408084206001600160a01b03909216845291528120555080613ffe8161523a565b915050613fa8565b60008181526007602052604081205460068054909190811061402a5761402a6150b8565b6000918252602080832060069290920290910160030180546001600160a01b0319166001600160a01b039485161790559184168152600890915260408120805490919061407990600190615385565b90506000826000018281548110614092576140926150b8565b906000526020600020015490506000836001016000868152602001908152602001600020549050818460000182815481106140cf576140cf6150b8565b6000918252602080832090910192909255838152600186019091526040808220839055868252812055835484908061410957614109615474565b60019003818190600052602060002001600090559055505050505050565b60008181526007602052604090205460068054849290811061414b5761414b6150b8565b6000918252602080832060069290920290910160030180546001600160a01b0319166001600160a01b03948516179055939091168152600880845260408083208054858552600182810188529285208190559286529082018155825292902090910155565b6006546000906141c290600190615385565b600083815260076020526040812054600680549394509092849081106141ea576141ea6150b8565b60009182526020918290206040805160c08101825260069093029091018054835260018101548385015260028101548383015260038101546001600160a01b03908116606085015260048201541660808401526005810180548351818702810187019094528084529394919360a08601939283018282801561429557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311614277575b505050505081525050905080600683815481106142b4576142b46150b8565b600091825260209182902083516006909202019081558282015160018201556040830151600282015560608301516003820180546001600160a01b039283166001600160a01b031991821617909155608085015160048401805491909316911617905560a08301518051919261433292600585019290910190614a2c565b5050815160009081526007602052604080822085905586825281205550600680548061436057614360615474565b60008281526020812060066000199093019283020181815560018101829055600281018290556003810180546001600160a01b03199081169091556004820180549091169055906143b46005830182614a81565b5050905550505050565b6000818152600760205260408120546006805483929081106143e2576143e26150b8565b6000918252602082206005600690920201015491505b8181101561448757600084815260076020526040902054600680546001600160a01b0388169290811061442d5761442d6150b8565b9060005260206000209060060201600501828154811061444f5761444f6150b8565b6000918252602090912001546001600160a01b0316141561447557600192505050610e92565b8061447f8161523a565b9150506143f8565b506000949350505050565b61449d8383836120fd565b611018576144aa816139bd565b6144b58460206146bd565b836040516020016144c89392919061548a565b60408051601f198184030181529082905262461bcd60e51b8252610fbb91600401614b3b565b60006001600160a01b0384163b1515801561458257506040516301ffc9a760e01b8152630a85bd0160e11b60048201526001600160a01b038516906301ffc9a79060240160206040518083038186803b15801561454a57600080fd5b505afa15801561455e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061458291906153fc565b156146b557836001600160a01b031663150b7a0261459e612715565b8786866040518563ffffffff1660e01b81526004016145c0949392919061551f565b602060405180830381600087803b1580156145da57600080fd5b505af192505050801561460a575060408051601f3d908101601f1916820190925261460791810190615457565b60015b61469b573d808015614638576040519150601f19603f3d011682016040523d82523d6000602084013e61463d565b606091505b508051613f3b5760405162461bcd60e51b815260206004820152602660248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201526531b2b4bb32b960d11b6064820152608401610fbb565b6001600160e01b031916630a85bd0160e11b14905061115f565b50600161115f565b606060006146cc83600261555c565b6146d790600261539c565b67ffffffffffffffff8111156146ef576146ef614d66565b6040519080825280601f01601f191660200182016040528015614719576020820181803683370190505b509050600360fc1b81600081518110614734576147346150b8565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110614763576147636150b8565b60200101906001600160f81b031916908160001a905350600061478784600261555c565b61479290600161539c565b90505b600181111561480a576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106147c6576147c66150b8565b1a60f81b8282815181106147dc576147dc6150b8565b60200101906001600160f81b031916908160001a90535060049490941c936148038161557b565b9050614795565b5083156111175760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610fbb565b6006805482516000908152600760209081526040808320849055600184018555918490528451929093027ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f8101928355838501517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d40820155908401517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4182015560608401517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d42820180546001600160a01b039283166001600160a01b03199182161790915560808601517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d438401805491909316911617905560a084015180518594611b88937ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4401920190614a2c565b8280546149b490615083565b90600052602060002090601f0160209004810192826149d65760008555614a1c565b82601f106149ef57805160ff1916838001178555614a1c565b82800160010185558215614a1c579182015b82811115614a1c578251825591602001919060010190614a01565b50614a28929150614a9b565b5090565b828054828255906000526020600020908101928215614a1c579160200282015b82811115614a1c57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190614a4c565b508054600082559060005260206000209081019061149c91905b5b80821115614a285760008155600101614a9c565b6001600160e01b03198116811461149c57600080fd5b600060208284031215614ad857600080fd5b813561111781614ab0565b60005b83811015614afe578181015183820152602001614ae6565b83811115611b885750506000910152565b60008151808452614b27816020860160208601614ae3565b601f01601f19169290920160200192915050565b6020815260006111176020830184614b0f565b600060208284031215614b6057600080fd5b5035919050565b80356001600160a01b03811681146118a957600080fd5b60008060408385031215614b9157600080fd5b614b9a83614b67565b946020939093013593505050565b600080600060608486031215614bbd57600080fd5b83359250614bcd60208501614b67565b9150604084013590509250925092565b6020808252825182820181905260009190848201906040850190845b81811015614c1557835183529284019291840191600101614bf9565b50909695505050505050565b600060208284031215614c3357600080fd5b61111782614b67565b600080600060608486031215614c5157600080fd5b614c5a84614b67565b9250614bcd60208501614b67565b600080600060608486031215614c7d57600080fd5b505081359360208301359350604090920135919050565b600080600060608486031215614ca957600080fd5b8335925060208401359150614cc060408501614b67565b90509250925092565b60008060408385031215614cdc57600080fd5b50508035926020909101359150565b600060808284031215614cfd57600080fd5b50919050565b600080600060c08486031215614d1857600080fd5b8335925060208401359150614cc08560408601614ceb565b60008060408385031215614d4357600080fd5b82359150602083013560ff81168114614d5b57600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715614da557614da5614d66565b604052919050565b600067ffffffffffffffff821115614dc757614dc7614d66565b50601f01601f191660200190565b6000614de8614de384614dad565b614d7c565b9050828152838383011115614dfc57600080fd5b828260208301376000602084830101529392505050565b600082601f830112614e2457600080fd5b61111783833560208501614dd5565b801515811461149c57600080fd5b60008060008060808587031215614e5757600080fd5b84359350602085013567ffffffffffffffff811115614e7557600080fd5b614e8187828801614e13565b9350506040850135614e9281614e33565b9150614ea060608601614b67565b905092959194509250565b60008060408385031215614ebe57600080fd5b82359150602083013567ffffffffffffffff811115614edc57600080fd5b614ee885828601614e13565b9150509250929050565b60008060408385031215614f0557600080fd5b614f0e83614b67565b91506020830135614d5b81614e33565b60008060008060808587031215614f3457600080fd5b614f3d85614b67565b9350614f4b60208601614b67565b925060408501359150606085013567ffffffffffffffff811115614f6e57600080fd5b8501601f81018713614f7f57600080fd5b614f8e87823560208401614dd5565b91505092959194509250565b60008060008060006101008688031215614fb357600080fd5b614fbc86614b67565b9450602086013593506040860135925060608601359150614fe08760808801614ceb565b90509295509295909350565b60008060408385031215614fff57600080fd5b8235915061500f60208401614b67565b90509250929050565b6001600160a01b038616815260ff8516602082015260a06040820181905260009061504590830186614b0f565b606083019490945250608001529392505050565b6000806040838503121561506c57600080fd5b61507583614b67565b915061500f60208401614b67565b600181811c9082168061509757607f821691505b60208210811415614cfd57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60208082526022908201527f455243333532353a20617070726f76616c20746f2063757272656e74206f776e60408201526132b960f11b606082015260800190565b60208082526039908201527f455243333532353a20617070726f76652063616c6c6572206973206e6f74206f60408201527f776e6572206e6f7220617070726f76656420666f7220616c6c00000000000000606082015260800190565b6000835161517f818460208801614ae3565b64736c6f742f60d81b90830190815283516151a1816005840160208801614ae3565b01600501949350505050565b6000602082840312156151bf57600080fd5b815167ffffffffffffffff8111156151d657600080fd5b8201601f810184136151e757600080fd5b80516151f5614de382614dad565b81815285602083850101111561520a57600080fd5b61521b826020830160208601614ae3565b95945050505050565b634e487b7160e01b600052601160045260246000fd5b600060001982141561524e5761524e615224565b5060010190565b6020808252600f908201526e2727aa1029aaa822a91020a226a4a760891b604082015260600190565b60208082526012908201527126aaa9aa1021229023a0aa22a5a2a2a822a960711b604082015260600190565b634e487b7160e01b600052602160045260246000fd5b60208082526032908201527f455243333532353a207472616e736665722063616c6c6572206973206e6f74206040820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b606082015260800190565b60008351615324818460208801614ae3565b835190830190615338818360208801614ae3565b01949350505050565b60008351615353818460208801614ae3565b68636f6e74726163742f60b81b9083019081528351615379816009840160208801614ae3565b01600901949350505050565b60008282101561539757615397615224565b500390565b600082198211156153af576153af615224565b500190565b60208082526028908201527f455243333532353a207472616e7366657220746f206e6f6e20455243333532356040820152672932b1b2b4bb32b960c11b606082015260800190565b60006020828403121561540e57600080fd5b815161111781614e33565b60018060a01b038616815284602082015283604082015282606082015260a06080820152600061544c60a0830184614b0f565b979650505050505050565b60006020828403121561546957600080fd5b815161111781614ab0565b634e487b7160e01b600052603160045260246000fd5b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600084516154c2816017850160208901614ae3565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015284516154f3816028840160208901614ae3565b6a01037b7103237b6b0b4b7160ad1b602892909101918201526033810193909352505060530192915050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061555290830184614b0f565b9695505050505050565b600081600019048311821515161561557657615576615224565b500290565b60008161558a5761558a615224565b50600019019056fefca69b310bd19d275687ebe00b254b0772cf7a367c3f81a9a5a433f831fdc1dc3c63e605be3290ab6b04cfc46c6e1516e626d43236b034f09d7ede1d017beb0c449b0a7e0acc0a95c71947cb19fdd122b42abca9bdfbd6707ca4f1e3fdaef05ea2646970667358221220e4df5c15428c678e9b661667fa6e3efef4b9205205ffd1907cb108250dccbf1b64736f6c63430008090033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Gateway Token contract is responsible for managing Identity.com KYC gateway tokens  those tokens represent completed KYC with attached identity.  Gateway tokens using ERC721 standard with custom extentions. Contract handles multiple levels of access such as Network Authority (may represent a specific regulator body)  Gatekeepers (Identity.com network parties who can mint/burn/freeze gateway tokens) and overall system Admin who can add new Gatekeepers and Network Authorities",
    "kind": "dev",
    "methods": {
      "addBit(uint256,uint8)": {
        "details": "Triggers to add one bit at particular `index` for gateway token with `tokenId`"
      },
      "addBitmask(uint256,uint256)": {
        "details": "Triggers to add bitmask for gateway token with `tokenId`"
      },
      "addGatekeeper(address,uint256)": {
        "details": "Triggers to add new gatekeeper into the system. ",
        "params": {
          "gatekeeper": "Gatekeeper address"
        }
      },
      "addNetworkAuthority(address,uint256)": {
        "details": "Triggers to add new network authority into the system. ",
        "params": {
          "authority": "Network Authority address"
        }
      },
      "burn(uint256)": {
        "details": "Triggers to burn gateway token",
        "params": {
          "tokenId": "Gateway token id"
        }
      },
      "clearBitmask(uint256)": {
        "details": "Triggers to clear bitmask for gateway token with `tokenId`"
      },
      "constructor": {
        "details": "Gateway Token constructor initializes the contract by  setting a `name` and a `symbol` to the gateway token. Initiates gateway token roles with main system admin, `NETWORK_AUTHORITY_ROLE` responsible for adding/removing Gatekeepers and  `GATEKEEPER_ROLE` responsible for minting/burning/transferring tokens"
      },
      "contractURI()": {
        "details": "This function SHOULD return the URI for this contract in JSON format, starting with  header `data:application/json;`.  See https://eips.ethereum.org/EIPS/eip-3525 for the JSON schema for contract URI.",
        "returns": {
          "_0": "The JSON formatted URI of the current ERC3525 contract"
        }
      },
      "expiration(uint256)": {
        "details": "Triggers to get specificied `tokenId` expiration timestamp",
        "params": {
          "tokenId": "Gateway token id"
        }
      },
      "freeze(uint256)": {
        "details": "Triggers to freeze gateway token",
        "params": {
          "tokenId": "Gateway token id"
        }
      },
      "getIdentity(uint256)": {
        "details": "Triggers to get identity attached to specific gateway token",
        "params": {
          "tokenId": "Gateway token id"
        }
      },
      "getRoleAdmin(bytes32,uint256)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getToken(uint256)": {
        "details": "Triggers to get all information gateway token related to specified `tokenId`",
        "params": {
          "tokenId": "Gateway token id"
        }
      },
      "getTokenBitmask(uint256)": {
        "details": "Triggers to get gateway token bitmask"
      },
      "getTokenState(uint256)": {
        "details": "Triggers to get gateway token state with specified `tokenId`",
        "params": {
          "tokenId": "Gateway token id"
        }
      },
      "grantRole(bytes32,uint256,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,uint256,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isGatekeeper(address,uint256)": {
        "details": "Triggers to verify if address has a GATEKEEPER role. ",
        "params": {
          "gatekeeper": "Gatekeeper address"
        }
      },
      "isNetworkAuthority(address,uint256)": {
        "details": "Triggers to verify if authority has a NETWORK_AUTHORITY_ROLE role. ",
        "params": {
          "authority": "Network Authority address"
        }
      },
      "mint(address,uint256,uint256,uint256,(uint256,uint8,address,address))": {
        "details": "Triggers to mint gateway token",
        "params": {
          "charge": "The charge details for token issuance (ignored here - handled if at all by the forwarding contract)",
          "mask": "The bitmask for the token",
          "network": "Gateway token type",
          "to": "Gateway token owner"
        }
      },
      "name()": {
        "details": "Returns the token collection name."
      },
      "removeBit(uint256,uint8)": {
        "details": "Triggers to clear one bit at particular `index` for gateway token with `tokenId`"
      },
      "removeBitmask(uint256,uint8)": {
        "details": "Triggers to remove bits in `removingMask` for gateway token with `tokenId`"
      },
      "removeGatekeeper(address,uint256)": {
        "details": "Triggers to remove existing gatekeeper from gateway token. ",
        "params": {
          "gatekeeper": "Gatekeeper address"
        }
      },
      "removeNetworkAuthority(address,uint256)": {
        "details": "Triggers to remove existing network authority from gateway token. ",
        "params": {
          "authority": "Network Authority address"
        }
      },
      "renounceRole(bytes32,uint256,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revoke(uint256)": {
        "details": "Triggers to revoke gateway token",
        "params": {
          "tokenId": "Gateway token id"
        }
      },
      "revokeRole(bytes32,uint256,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setBitmask(uint256,uint256)": {
        "details": "Triggers to set full bitmask for gateway token with `tokenId`"
      },
      "setExpiration(uint256,uint256,(uint256,uint8,address,address))": {
        "details": "Triggers to set expiration for tokenId",
        "params": {
          "charge": "The charge details for token refresh (ignored here - handled if at all by the forwarding contract)",
          "tokenId": "Gateway token id"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "Returns the token collection symbol."
      },
      "tokenURI(uint256)": {
        "details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
      },
      "totalSupply()": {
        "returns": {
          "_0": "A count of valid NFTs tracked by this contract, where each one of  them has an assigned and queryable owner not equal to the zero address"
        }
      },
      "transferDAOManager(address,address,uint256)": {
        "details": "Transfers Gateway Token DAO Manager access from daoManager to `newManager`",
        "params": {
          "newManager": "Address to transfer DAO Manager role for."
        }
      },
      "transfersRestricted()": {
        "details": "Returns true if gateway token owner transfers restricted, and false otherwise."
      },
      "unfreeze(uint256)": {
        "details": "Triggers to unfreeze gateway token",
        "params": {
          "tokenId": "Gateway token id"
        }
      },
      "updateFlagsStorage(address)": {
        "details": "Triggers to update FlagsStorage contract address",
        "params": {
          "flagsStorage": "FlagsStorage contract address"
        }
      },
      "valueDecimals()": {
        "details": "Returns the number of decimals the token uses for value."
      },
      "verifyToken(address,uint256)": {
        "details": "Triggered by external contract to verify the validity of the default token for `owner`. Checks owner has any token on gateway token contract, `tokenId` still active, and not expired."
      },
      "verifyToken(uint256)": {
        "details": "Triggered by external contract to verify the validity of the default token for `owner`. Checks owner has any token on gateway token contract, `tokenId` still active, and not expired."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addNetworkAuthority(address,uint256)": {
        "notice": "Can be triggered by Gateway Token Controller or any Network Authority"
      },
      "contractURI()": {
        "notice": "Returns the Uniform Resource Identifier (URI) for the current ERC3525 contract."
      },
      "removeNetworkAuthority(address,uint256)": {
        "notice": "Can be triggered by Gateway Token Controller or any Network Authority"
      },
      "totalSupply()": {
        "notice": "Count NFTs tracked by this contract"
      },
      "transferDAOManager(address,address,uint256)": {
        "notice": "GatewayToken contract has to be DAO Governed"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5925,
        "contract": "contracts/GatewayToken.sol:GatewayToken",
        "label": "_trustedForwarders",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1956,
        "contract": "contracts/GatewayToken.sol:GatewayToken",
        "label": "_name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 1958,
        "contract": "contracts/GatewayToken.sol:GatewayToken",
        "label": "_symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 1960,
        "contract": "contracts/GatewayToken.sol:GatewayToken",
        "label": "_decimals",
        "offset": 0,
        "slot": "3",
        "type": "t_uint8"
      },
      {
        "astId": 1963,
        "contract": "contracts/GatewayToken.sol:GatewayToken",
        "label": "_tokenIdGenerator",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(Counter)746_storage"
      },
      {
        "astId": 1969,
        "contract": "contracts/GatewayToken.sol:GatewayToken",
        "label": "_approvedValues",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1973,
        "contract": "contracts/GatewayToken.sol:GatewayToken",
        "label": "_allTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_struct(TokenData)1942_storage)dyn_storage"
      },
      {
        "astId": 1977,
        "contract": "contracts/GatewayToken.sol:GatewayToken",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1982,
        "contract": "contracts/GatewayToken.sol:GatewayToken",
        "label": "_addressData",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(AddressData)1954_storage)"
      },
      {
        "astId": 1985,
        "contract": "contracts/GatewayToken.sol:GatewayToken",
        "label": "metadataDescriptor",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IERC3525MetadataDescriptor)4439"
      },
      {
        "astId": 6068,
        "contract": "contracts/GatewayToken.sol:GatewayToken",
        "label": "_roleDomain",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_struct(RoleDomain)6063_storage)"
      },
      {
        "astId": 6072,
        "contract": "contracts/GatewayToken.sol:GatewayToken",
        "label": "_superAdmins",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 6533,
        "contract": "contracts/GatewayToken.sol:GatewayToken",
        "label": "flagsStorage",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(IFlagsStorage)6906"
      },
      {
        "astId": 6537,
        "contract": "contracts/GatewayToken.sol:GatewayToken",
        "label": "bitmasks",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4487,
        "contract": "contracts/GatewayToken.sol:GatewayToken",
        "label": "controller",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 4489,
        "contract": "contracts/GatewayToken.sol:GatewayToken",
        "label": "isTransfersRestricted",
        "offset": 20,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 4493,
        "contract": "contracts/GatewayToken.sol:GatewayToken",
        "label": "isNetworkDAOGoverned",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 4512,
        "contract": "contracts/GatewayToken.sol:GatewayToken",
        "label": "tokenURIs",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 4517,
        "contract": "contracts/GatewayToken.sol:GatewayToken",
        "label": "tokenStates",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_enum(TokenState)4485)"
      },
      {
        "astId": 4521,
        "contract": "contracts/GatewayToken.sol:GatewayToken",
        "label": "expirations",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4525,
        "contract": "contracts/GatewayToken.sol:GatewayToken",
        "label": "networks",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_uint256,t_string_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(TokenData)1942_storage)dyn_storage": {
        "base": "t_struct(TokenData)1942_storage",
        "encoding": "dynamic_array",
        "label": "struct ERC3525.TokenData[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC3525MetadataDescriptor)4439": {
        "encoding": "inplace",
        "label": "contract IERC3525MetadataDescriptor",
        "numberOfBytes": "20"
      },
      "t_contract(IFlagsStorage)6906": {
        "encoding": "inplace",
        "label": "contract IFlagsStorage",
        "numberOfBytes": "20"
      },
      "t_enum(TokenState)4485": {
        "encoding": "inplace",
        "label": "enum GatewayToken.TokenState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(AddressData)1954_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ERC3525.AddressData)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressData)1954_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)6057_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ParameterizedAccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)6057_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_enum(TokenState)4485)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => enum GatewayToken.TokenState)",
        "numberOfBytes": "32",
        "value": "t_enum(TokenState)4485"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(RoleDomain)6063_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ParameterizedAccessControl.RoleDomain)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleDomain)6063_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressData)1954_storage": {
        "encoding": "inplace",
        "label": "struct ERC3525.AddressData",
        "members": [
          {
            "astId": 1945,
            "contract": "contracts/GatewayToken.sol:GatewayToken",
            "label": "ownedTokens",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 1949,
            "contract": "contracts/GatewayToken.sol:GatewayToken",
            "label": "ownedTokensIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 1953,
            "contract": "contracts/GatewayToken.sol:GatewayToken",
            "label": "approvals",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Counter)746_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 745,
            "contract": "contracts/GatewayToken.sol:GatewayToken",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)6057_storage": {
        "encoding": "inplace",
        "label": "struct ParameterizedAccessControl.RoleData",
        "members": [
          {
            "astId": 6054,
            "contract": "contracts/GatewayToken.sol:GatewayToken",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 6056,
            "contract": "contracts/GatewayToken.sol:GatewayToken",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleDomain)6063_storage": {
        "encoding": "inplace",
        "label": "struct ParameterizedAccessControl.RoleDomain",
        "members": [
          {
            "astId": 6062,
            "contract": "contracts/GatewayToken.sol:GatewayToken",
            "label": "roles",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)6057_storage)"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TokenData)1942_storage": {
        "encoding": "inplace",
        "label": "struct ERC3525.TokenData",
        "members": [
          {
            "astId": 1930,
            "contract": "contracts/GatewayToken.sol:GatewayToken",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1932,
            "contract": "contracts/GatewayToken.sol:GatewayToken",
            "label": "slot",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1934,
            "contract": "contracts/GatewayToken.sol:GatewayToken",
            "label": "balance",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1936,
            "contract": "contracts/GatewayToken.sol:GatewayToken",
            "label": "owner",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 1938,
            "contract": "contracts/GatewayToken.sol:GatewayToken",
            "label": "approved",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 1941,
            "contract": "contracts/GatewayToken.sol:GatewayToken",
            "label": "valueApprovals",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}