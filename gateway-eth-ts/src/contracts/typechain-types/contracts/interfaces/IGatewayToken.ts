/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type ChargeStruct = {
  value: PromiseOrValue<BigNumberish>;
  chargeType: PromiseOrValue<BigNumberish>;
  token: PromiseOrValue<string>;
  tokenSender: PromiseOrValue<string>;
  recipient: PromiseOrValue<string>;
};

export type ChargeStructOutput = [BigNumber, number, string, string, string] & {
  value: BigNumber;
  chargeType: number;
  token: string;
  tokenSender: string;
  recipient: string;
};

export interface IGatewayTokenInterface extends utils.Interface {
  functions: {
    "addNetworkAuthority(address,uint256)": FunctionFragment;
    "createNetwork(uint256,string,bool,address)": FunctionFragment;
    "getNetwork(uint256)": FunctionFragment;
    "getToken(uint256)": FunctionFragment;
    "isGatekeeper(address,uint256)": FunctionFragment;
    "isNetworkAuthority(address,uint256)": FunctionFragment;
    "mint(address,uint256,uint256,uint256,(uint256,uint8,address,address,address))": FunctionFragment;
    "removeNetworkAuthority(address,uint256)": FunctionFragment;
    "renameNetwork(uint256,string)": FunctionFragment;
    "transferDAOManager(address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addNetworkAuthority"
      | "createNetwork"
      | "getNetwork"
      | "getToken"
      | "isGatekeeper"
      | "isNetworkAuthority"
      | "mint"
      | "removeNetworkAuthority"
      | "renameNetwork"
      | "transferDAOManager"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addNetworkAuthority",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createNetwork",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getNetwork",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getToken",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isGatekeeper",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isNetworkAuthority",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      ChargeStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeNetworkAuthority",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renameNetwork",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferDAOManager",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "addNetworkAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createNetwork",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNetwork", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isGatekeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isNetworkAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeNetworkAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renameNetwork",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferDAOManager",
    data: BytesLike
  ): Result;

  events: {
    "DAOManagerTransferred(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DAOManagerTransferred"): EventFragment;
}

export interface DAOManagerTransferredEventObject {
  previousDAOManager: string;
  newDAOManager: string;
  network: BigNumber;
}
export type DAOManagerTransferredEvent = TypedEvent<
  [string, string, BigNumber],
  DAOManagerTransferredEventObject
>;

export type DAOManagerTransferredEventFilter =
  TypedEventFilter<DAOManagerTransferredEvent>;

export interface IGatewayToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IGatewayTokenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addNetworkAuthority(
      authority: PromiseOrValue<string>,
      network: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createNetwork(
      network: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      daoGoverned: PromiseOrValue<boolean>,
      daoManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getNetwork(
      network: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getToken(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, number, string, BigNumber, BigNumber] & {
        owner: string;
        state: number;
        identity: string;
        expiration: BigNumber;
        bitmask: BigNumber;
      }
    >;

    isGatekeeper(
      gatekeeper: PromiseOrValue<string>,
      network: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isNetworkAuthority(
      authority: PromiseOrValue<string>,
      network: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mint(
      to: PromiseOrValue<string>,
      network: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      mask: PromiseOrValue<BigNumberish>,
      charge: ChargeStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeNetworkAuthority(
      authority: PromiseOrValue<string>,
      network: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renameNetwork(
      network: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferDAOManager(
      previousManager: PromiseOrValue<string>,
      newManager: PromiseOrValue<string>,
      network: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addNetworkAuthority(
    authority: PromiseOrValue<string>,
    network: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createNetwork(
    network: PromiseOrValue<BigNumberish>,
    name: PromiseOrValue<string>,
    daoGoverned: PromiseOrValue<boolean>,
    daoManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getNetwork(
    network: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getToken(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, number, string, BigNumber, BigNumber] & {
      owner: string;
      state: number;
      identity: string;
      expiration: BigNumber;
      bitmask: BigNumber;
    }
  >;

  isGatekeeper(
    gatekeeper: PromiseOrValue<string>,
    network: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isNetworkAuthority(
    authority: PromiseOrValue<string>,
    network: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mint(
    to: PromiseOrValue<string>,
    network: PromiseOrValue<BigNumberish>,
    expiration: PromiseOrValue<BigNumberish>,
    mask: PromiseOrValue<BigNumberish>,
    charge: ChargeStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeNetworkAuthority(
    authority: PromiseOrValue<string>,
    network: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renameNetwork(
    network: PromiseOrValue<BigNumberish>,
    name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferDAOManager(
    previousManager: PromiseOrValue<string>,
    newManager: PromiseOrValue<string>,
    network: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addNetworkAuthority(
      authority: PromiseOrValue<string>,
      network: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createNetwork(
      network: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      daoGoverned: PromiseOrValue<boolean>,
      daoManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getNetwork(
      network: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getToken(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, number, string, BigNumber, BigNumber] & {
        owner: string;
        state: number;
        identity: string;
        expiration: BigNumber;
        bitmask: BigNumber;
      }
    >;

    isGatekeeper(
      gatekeeper: PromiseOrValue<string>,
      network: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isNetworkAuthority(
      authority: PromiseOrValue<string>,
      network: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mint(
      to: PromiseOrValue<string>,
      network: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      mask: PromiseOrValue<BigNumberish>,
      charge: ChargeStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    removeNetworkAuthority(
      authority: PromiseOrValue<string>,
      network: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renameNetwork(
      network: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferDAOManager(
      previousManager: PromiseOrValue<string>,
      newManager: PromiseOrValue<string>,
      network: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DAOManagerTransferred(address,address,uint256)"(
      previousDAOManager?: null,
      newDAOManager?: null,
      network?: null
    ): DAOManagerTransferredEventFilter;
    DAOManagerTransferred(
      previousDAOManager?: null,
      newDAOManager?: null,
      network?: null
    ): DAOManagerTransferredEventFilter;
  };

  estimateGas: {
    addNetworkAuthority(
      authority: PromiseOrValue<string>,
      network: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createNetwork(
      network: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      daoGoverned: PromiseOrValue<boolean>,
      daoManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getNetwork(
      network: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getToken(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isGatekeeper(
      gatekeeper: PromiseOrValue<string>,
      network: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isNetworkAuthority(
      authority: PromiseOrValue<string>,
      network: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mint(
      to: PromiseOrValue<string>,
      network: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      mask: PromiseOrValue<BigNumberish>,
      charge: ChargeStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeNetworkAuthority(
      authority: PromiseOrValue<string>,
      network: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renameNetwork(
      network: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferDAOManager(
      previousManager: PromiseOrValue<string>,
      newManager: PromiseOrValue<string>,
      network: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addNetworkAuthority(
      authority: PromiseOrValue<string>,
      network: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createNetwork(
      network: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      daoGoverned: PromiseOrValue<boolean>,
      daoManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getNetwork(
      network: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getToken(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isGatekeeper(
      gatekeeper: PromiseOrValue<string>,
      network: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isNetworkAuthority(
      authority: PromiseOrValue<string>,
      network: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mint(
      to: PromiseOrValue<string>,
      network: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      mask: PromiseOrValue<BigNumberish>,
      charge: ChargeStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeNetworkAuthority(
      authority: PromiseOrValue<string>,
      network: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renameNetwork(
      network: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferDAOManager(
      previousManager: PromiseOrValue<string>,
      newManager: PromiseOrValue<string>,
      network: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
