/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  BitMask,
  BitMaskInterface,
} from "../../../contracts/library/BitMask";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "self",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "index",
        type: "uint8",
      },
    ],
    name: "checkBit",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "self",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "index",
        type: "uint8",
      },
    ],
    name: "clearBit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "self",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "mask",
        type: "uint256",
      },
    ],
    name: "or",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "self",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "index",
        type: "uint8",
      },
    ],
    name: "setBit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x61017261003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c8063097c2cb21461005b5780634ee29090146100805780635fc781e41461009b578063f5c7eca5146100b7575b600080fd5b61006d6100693660046100e4565b1790565b6040519081526020015b60405180910390f35b61006d61008e366004610106565b600160ff919091161b1790565b61006d6100a9366004610106565b600160ff919091161b191690565b6100d46100c5366004610106565b600160ff919091161b16151590565b6040519015158152602001610077565b600080604083850312156100f757600080fd5b50508035926020909101359150565b6000806040838503121561011957600080fd5b82359150602083013560ff8116811461013157600080fd5b80915050925092905056fea26469706673582212209e9e0b42d6d815c5d39a1ab6382bd5e58a27cf92cecc2aaeaf6a1dde6fccf8d564736f6c63430008090033";

type BitMaskConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BitMaskConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BitMask__factory extends ContractFactory {
  constructor(...args: BitMaskConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BitMask> {
    return super.deploy(overrides || {}) as Promise<BitMask>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): BitMask {
    return super.attach(address) as BitMask;
  }
  override connect(signer: Signer): BitMask__factory {
    return super.connect(signer) as BitMask__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BitMaskInterface {
    return new utils.Interface(_abi) as BitMaskInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BitMask {
    return new Contract(address, _abi, signerOrProvider) as BitMask;
  }
}
