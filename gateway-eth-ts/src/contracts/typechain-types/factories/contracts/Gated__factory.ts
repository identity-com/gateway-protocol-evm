/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Gated, GatedInterface } from "../../contracts/Gated";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "gatewayTokenContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "gatekeeperNetwork",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "gatewayToken",
        type: "address",
      },
    ],
    name: "IsGated__InvalidGatewayToken",
    type: "error",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060405160d638038060d6833981016040819052602a916052565b600080546001600160a01b0319166001600160a01b039390931692909217909155600155608a565b60008060408385031215606457600080fd5b82516001600160a01b0381168114607a57600080fd5b6020939093015192949293505050565b603f8060976000396000f3fe6080604052600080fdfea26469706673582212203febb2ecc75d5c0fa410141b81f609c99801aafe65a766dda868fccb3f59177d64736f6c63430008090033";

type GatedConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GatedConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Gated__factory extends ContractFactory {
  constructor(...args: GatedConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    gatewayTokenContract: PromiseOrValue<string>,
    gatekeeperNetwork: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Gated> {
    return super.deploy(
      gatewayTokenContract,
      gatekeeperNetwork,
      overrides || {}
    ) as Promise<Gated>;
  }
  override getDeployTransaction(
    gatewayTokenContract: PromiseOrValue<string>,
    gatekeeperNetwork: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      gatewayTokenContract,
      gatekeeperNetwork,
      overrides || {}
    );
  }
  override attach(address: string): Gated {
    return super.attach(address) as Gated;
  }
  override connect(signer: Signer): Gated__factory {
    return super.connect(signer) as Gated__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GatedInterface {
    return new utils.Interface(_abi) as GatedInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Gated {
    return new Contract(address, _abi, signerOrProvider) as Gated;
  }
}
