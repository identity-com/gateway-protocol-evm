/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  GatewayTokenClientTest,
  GatewayTokenClientTestInterface,
} from "../../../test/contracts/GatewayTokenClientTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "gatewayTokenContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "gatekeeperNetwork",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "gatewayToken",
        type: "address",
      },
    ],
    name: "IsGated__InvalidGatewayToken",
    type: "error",
  },
  {
    inputs: [],
    name: "IsGated__ZeroContractAddress",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [],
    name: "Success",
    type: "event",
  },
  {
    inputs: [],
    name: "testGated",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c060405234801561001057600080fd5b5060405161029938038061029983398101604081905261002f91610071565b81816001600160a01b0382166100585760405163ccac40d160e01b815260040160405180910390fd5b6001600160a01b0390911660805260a052506100ab9050565b6000806040838503121561008457600080fd5b82516001600160a01b038116811461009b57600080fd5b6020939093015192949293505050565b60805160a0516101c46100d5600039600060520152600081816078015261010801526101c46000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063968f76bd14610030575b600080fd5b61003861003a565b005b604051600162740ee760e11b031981523360048201527f000000000000000000000000000000000000000000000000000000000000000060248201527f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b0382169063ff17e23290604401602060405180830381865afa1580156100c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100ed9190610165565b610139576040516355ec9bfb60e11b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016600482015260240160405180910390fd5b6040517f395a9ab3d1230297d931e1fa224ca597ca0e45f620c1aeb74b512bfcc6f66aab90600090a150565b60006020828403121561017757600080fd5b8151801515811461018757600080fd5b939250505056fea26469706673582212200b204c6fcbf4ad8ebbe4af01fe74c3a3aebd09b88222475ee50579f76791cd4d64736f6c63430008130033";

type GatewayTokenClientTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GatewayTokenClientTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GatewayTokenClientTest__factory extends ContractFactory {
  constructor(...args: GatewayTokenClientTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    gatewayTokenContract: PromiseOrValue<string>,
    gatekeeperNetwork: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<GatewayTokenClientTest> {
    return super.deploy(
      gatewayTokenContract,
      gatekeeperNetwork,
      overrides || {}
    ) as Promise<GatewayTokenClientTest>;
  }
  override getDeployTransaction(
    gatewayTokenContract: PromiseOrValue<string>,
    gatekeeperNetwork: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      gatewayTokenContract,
      gatekeeperNetwork,
      overrides || {}
    );
  }
  override attach(address: string): GatewayTokenClientTest {
    return super.attach(address) as GatewayTokenClientTest;
  }
  override connect(signer: Signer): GatewayTokenClientTest__factory {
    return super.connect(signer) as GatewayTokenClientTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GatewayTokenClientTestInterface {
    return new utils.Interface(_abi) as GatewayTokenClientTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GatewayTokenClientTest {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as GatewayTokenClientTest;
  }
}
